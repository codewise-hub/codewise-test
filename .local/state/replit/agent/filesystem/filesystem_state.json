{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# CodewiseHub Learning Platform\n\n## Overview\n\nCodewiseHub is a comprehensive coding education platform designed for multiple user types including students (ages 6-17), teachers, and parents. The platform features age-appropriate learning paths with visual block-based programming for younger students (6-11) and text-based coding for teens (12-17). It includes interactive coding labs, progress tracking, project management, and specialized tools like a Micro:bit simulator for hands-on learning experiences.\n\n## Recent Updates (August 2025)\n\n✅ **Course Material System Complete** - Created comprehensive course database with 4 courses, 15 lessons, and 4 robotics activities\n✅ **Database Integration** - Set up PostgreSQL with Drizzle ORM for persistent course storage\n✅ **Import Tool** - Built automated course material import system with JSON-based content management\n✅ **Admin Panel** - Added course management interface with filtering by age groups\n✅ **API Endpoints** - Implemented REST API for courses, lessons, and robotics activities\n✅ **Vercel Deployment** - Successfully deployed application to production\n✅ **Production Import System** - Created multiple import methods including Node.js script and API endpoints\n✅ **Windows Compatibility** - Fixed tsx dependency issues with vanilla Node.js import script\n✅ **Neon Database Integration** - Created comprehensive setup guide and testing tools for Neon-Vercel integration\n\n**Latest Changes (August 2025):**\n✅ **Admin Separation Complete** - Removed admin functionality from main student application\n✅ **Dedicated CMS Application** - Created standalone admin-cms.html for content management\n✅ **Student Learning Materials** - Added comprehensive StudentLearningMaterials component with courses, lessons, and study materials\n✅ **Enhanced Student Dashboard** - Integrated learning materials directly into student experience\n✅ **Multi-Role Authentication** - Complete signup flow for all user types including school administrators\n✅ **Course Explanation Modals** - Added detailed course information with YouTube video tutorials\n✅ **Prompt Engineering Education** - Added AI/prompt engineering course and video tutorial for teen coders\n✅ **Age-Appropriate Content** - Fixed duplicate videos and ensured content matches age groups (6-11 vs 12-17)\n✅ **Video Content Optimization** - Shortened prompt engineering video to under 2 minutes for better engagement\n✅ **Authentication Migration Complete** - Migrated from Firebase to Neon PostgreSQL database with bcrypt password hashing and JWT sessions\n✅ **Subscription Package System** - Implemented comprehensive 5-tier subscription system with package selection during student/school admin signup\n✅ **Package Selection UI** - Created PackageSelector component with pricing display and feature lists for subscription tiers\n✅ **Build Error Resolution** - Fixed import path issues for Vercel deployment compatibility\n✅ **Rollup Build Fix** - Resolved Rollup variable tracing error in vite.config.vercel.ts for successful Vercel deployments\n✅ **Frontend Debugging** - Added console logging and debugging info to PackageSelector and AuthModal components\n✅ **Deployment Ready** - Build process now completes successfully with all assets generated correctly\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and modern development patterns\n- **Vite** as the build tool for fast development and optimized production builds\n- **Tailwind CSS** with shadcn/ui components for consistent, responsive design\n- **Component Architecture**: Modular React components with clear separation of concerns\n  - Page components for different dashboards (Student, Teacher, Parent)\n  - Shared UI components using Radix UI primitives\n  - Custom components for specialized features (CodingLab, MicrobitSimulator)\n\n### State Management\n- **React Context** for authentication state management\n- **TanStack Query** for server state management and caching\n- Local state management using React hooks for component-specific state\n\n### Authentication & User Management\n- **Neon PostgreSQL Database** with bcrypt password hashing for secure authentication\n- **JWT Session Management** with httpOnly cookies for security\n- **Express.js API Routes** for signup, signin, signout, and user management\n- Multi-role support with different user types (student, teacher, parent, school_admin)\n- Age-group specific features and content delivery\n\n### Backend Architecture\n- **Express.js** server with TypeScript for API endpoints\n- **Modular route registration** system for scalable API organization\n- **Memory storage** implementation with interface for future database integration\n- **Middleware** for request logging, error handling, and JSON parsing\n\n### Database Design\n- **Drizzle ORM** with PostgreSQL schema definitions\n- **Neon Database** as the PostgreSQL provider\n- **Schema structure** includes:\n  - Users table with role-based fields\n  - Courses and user progress tracking\n  - Projects and achievements system\n  - Flexible design for multi-tenant usage\n\n### Development & Build System\n- **ESM modules** throughout the application for modern JavaScript\n- **TypeScript** configuration with path aliases for clean imports\n- **Vite development server** with HMR and error overlay\n- **Production build** process combining frontend Vite build and backend esbuild compilation\n\n### Specialized Features\n- **Blockly integration** for visual programming (younger students)\n- **Monaco Editor** for text-based coding (older students)\n- **Micro:bit simulator** with LED matrix and button interactions\n- **Chart.js** for progress visualization and analytics\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React ecosystem**: React 18, React DOM, TypeScript support\n- **Vite**: Build tool with plugins for React and development enhancements\n- **Express.js**: Backend server framework with TypeScript support\n\n### UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n- **Radix UI**: Comprehensive component library for accessible UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **shadcn/ui**: Pre-built component system built on Radix UI\n\n### Database & ORM\n- **Drizzle ORM**: TypeScript ORM for database schema and queries\n- **Neon Database**: Serverless PostgreSQL database provider\n- **Drizzle-kit**: CLI tools for database migrations and schema management\n\n### Authentication & Backend Services\n- **Firebase**: Authentication, Firestore database, and file storage\n- **TanStack Query**: Server state management and data fetching\n- **React Hook Form**: Form handling with validation\n\n### Educational & Development Tools\n- **Blockly**: Google's visual programming editor for block-based coding\n- **Monaco Editor**: VS Code's editor for text-based programming\n- **Chart.js**: Data visualization for progress tracking and analytics\n\n### Development & Build Tools\n- **TypeScript**: Static typing for both frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Autoprefixer for browser compatibility\n- **Replit plugins**: Development environment integration and error handling","size_bytes":7338},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport cookieParser from 'cookie-parser';\nimport authRoutes from './authRoutes';\nimport packageRoutes from './packageRoutes';\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertCourseSchema, \n  insertLessonSchema, \n  insertRoboticsActivitySchema \n} from \"../shared/schema\";\nimport { registerImportRoutes } from \"./routes-import\";\nimport { registerEnhancedRoutes } from \"./enhanced-routes\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Add middleware\n  app.use(cookieParser());\n  \n  // Auth routes\n  app.use('/api/auth', authRoutes);\n  \n  // Package routes\n  app.use('/api', packageRoutes);\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid user data\" });\n    }\n  });\n\n  // Course routes\n  app.get(\"/api/courses\", async (req, res) => {\n    try {\n      const { ageGroup } = req.query;\n      let courses;\n      \n      if (ageGroup && typeof ageGroup === 'string') {\n        courses = await storage.getCoursesByAgeGroup(ageGroup);\n      } else {\n        courses = await storage.getAllCourses();\n      }\n      \n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/courses\", async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      const course = await storage.createCourse(courseData);\n      res.status(201).json(course);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid course data\" });\n    }\n  });\n\n  // Lesson routes\n  app.get(\"/api/courses/:courseId/lessons\", async (req, res) => {\n    try {\n      const lessons = await storage.getLessonsByCourse(req.params.courseId);\n      res.json(lessons);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/lessons\", async (req, res) => {\n    try {\n      const lessonData = insertLessonSchema.parse(req.body);\n      const lesson = await storage.createLesson(lessonData);\n      res.status(201).json(lesson);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid lesson data\" });\n    }\n  });\n\n  // Robotics activities routes\n  app.get(\"/api/robotics-activities\", async (req, res) => {\n    try {\n      const { ageGroup } = req.query;\n      let activities;\n      \n      if (ageGroup && typeof ageGroup === 'string') {\n        activities = await storage.getRoboticsActivitiesByAgeGroup(ageGroup);\n      } else {\n        activities = await storage.getAllRoboticsActivities();\n      }\n      \n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/robotics-activities\", async (req, res) => {\n    try {\n      const activityData = insertRoboticsActivitySchema.parse(req.body);\n      const activity = await storage.createRoboticsActivity(activityData);\n      res.status(201).json(activity);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid robotics activity data\" });\n    }\n  });\n\n  // Register import routes for production deployment\n  registerImportRoutes(app);\n  \n  // Register enhanced routes for multi-role system\n  registerEnhancedRoutes(app);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3887},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Course, \n  type InsertCourse,\n  type Lesson,\n  type InsertLesson,\n  type RoboticsActivity,\n  type InsertRoboticsActivity\n} from \"../shared/schema\";\nimport { db } from \"./db\";\nimport { users, courses, lessons, roboticsActivities } from \"../shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Course management\n  createCourse(course: InsertCourse): Promise<Course>;\n  getAllCourses(): Promise<Course[]>;\n  getCoursesByAgeGroup(ageGroup: string): Promise<Course[]>;\n  \n  // Lesson management\n  createLesson(lesson: InsertLesson): Promise<Lesson>;\n  getLessonsByCourse(courseId: string): Promise<Lesson[]>;\n  \n  // Robotics activities\n  createRoboticsActivity(activity: InsertRoboticsActivity): Promise<RoboticsActivity>;\n  getAllRoboticsActivities(): Promise<RoboticsActivity[]>;\n  getRoboticsActivitiesByAgeGroup(ageGroup: string): Promise<RoboticsActivity[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Course management\n  async createCourse(course: InsertCourse): Promise<Course> {\n    const [newCourse] = await db\n      .insert(courses)\n      .values(course)\n      .returning();\n    return newCourse;\n  }\n\n  async getAllCourses(): Promise<Course[]> {\n    return await db.select().from(courses);\n  }\n\n  async getCoursesByAgeGroup(ageGroup: string): Promise<Course[]> {\n    return await db.select().from(courses).where(eq(courses.ageGroup, ageGroup));\n  }\n\n  // Lesson management\n  async createLesson(lesson: InsertLesson): Promise<Lesson> {\n    const [newLesson] = await db\n      .insert(lessons)\n      .values(lesson)\n      .returning();\n    return newLesson;\n  }\n\n  async getLessonsByCourse(courseId: string): Promise<Lesson[]> {\n    return await db.select().from(lessons).where(eq(lessons.courseId, courseId));\n  }\n\n  // Robotics activities\n  async createRoboticsActivity(activity: InsertRoboticsActivity): Promise<RoboticsActivity> {\n    const [newActivity] = await db\n      .insert(roboticsActivities)\n      .values(activity)\n      .returning();\n    return newActivity;\n  }\n\n  async getAllRoboticsActivities(): Promise<RoboticsActivity[]> {\n    return await db.select().from(roboticsActivities);\n  }\n\n  async getRoboticsActivitiesByAgeGroup(ageGroup: string): Promise<RoboticsActivity[]> {\n    return await db.select().from(roboticsActivities).where(eq(roboticsActivities.ageGroup, ageGroup));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":3201},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, decimal } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Subscription packages\nexport const packages = pgTable(\"packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").default(\"USD\"),\n  duration: text(\"duration\").notNull(), // 'monthly', 'yearly'\n  features: text(\"features\"), // JSON array of features\n  maxStudents: integer(\"max_students\"), // for school packages\n  packageType: text(\"package_type\").notNull(), // 'individual', 'school'\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schools table\nexport const schools = pgTable(\"schools\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  adminUserId: varchar(\"admin_user_id\"), // references users.id\n  packageId: varchar(\"package_id\").references(() => packages.id),\n  subscriptionStatus: text(\"subscription_status\").default(\"active\"), // 'active', 'suspended', 'cancelled'\n  subscriptionStart: timestamp(\"subscription_start\"),\n  subscriptionEnd: timestamp(\"subscription_end\"),\n  maxStudents: integer(\"max_students\").default(100),\n  currentStudents: integer(\"current_students\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Enhanced users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\"),\n  name: text(\"name\").notNull(),\n  role: text(\"role\").notNull(), // 'student', 'teacher', 'parent', 'school_admin'\n  ageGroup: text(\"age_group\"), // '6-11', '12-17' for students\n  \n  // Package and subscription info\n  packageId: varchar(\"package_id\").references(() => packages.id),\n  subscriptionStatus: text(\"subscription_status\").default(\"pending\"), // 'pending', 'active', 'expired', 'cancelled'\n  subscriptionStart: timestamp(\"subscription_start\"),\n  subscriptionEnd: timestamp(\"subscription_end\"),\n  \n  // School association\n  schoolId: varchar(\"school_id\").references(() => schools.id),\n  \n  // Parent-child relationship\n  parentUserId: varchar(\"parent_user_id\"), // references users.id for parent linking\n  \n  // Additional info\n  grade: text(\"grade\"), // for students\n  subjects: text(\"subjects\"), // JSON array for teachers\n  lastLoginAt: timestamp(\"last_login_at\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User sessions table for authentication\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  sessionToken: text(\"session_token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  userAgent: text(\"user_agent\"),\n  ipAddress: text(\"ip_address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Parent-child relationships table (many-to-many)\nexport const parentChildRelations = pgTable(\"parent_child_relations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  parentUserId: varchar(\"parent_user_id\").references(() => users.id).notNull(),\n  childUserId: varchar(\"child_user_id\").references(() => users.id).notNull(),\n  relationshipType: text(\"relationship_type\").default(\"parent\"), // 'parent', 'guardian'\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const courses = pgTable(\"courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  ageGroup: text(\"age_group\").notNull(),\n  difficulty: text(\"difficulty\"), // 'beginner', 'intermediate', 'advanced'\n  category: text(\"category\"), // 'programming', 'robotics', 'web-development'\n  imageUrl: text(\"image_url\"),\n  estimatedHours: integer(\"estimated_hours\").default(10),\n  teacherId: varchar(\"teacher_id\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const lessons = pgTable(\"lessons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  courseId: varchar(\"course_id\").references(() => courses.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  content: text(\"content\"), // JSON string for rich content\n  orderIndex: integer(\"order_index\").notNull(),\n  type: text(\"type\"), // 'video', 'interactive', 'quiz', 'project'\n  estimatedMinutes: integer(\"estimated_minutes\").default(30),\n  videoUrl: text(\"video_url\"),\n  isRequired: boolean(\"is_required\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const roboticsActivities = pgTable(\"robotics_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: text(\"type\"), // 'puzzle', 'maze', 'challenge'\n  difficulty: text(\"difficulty\"), // 'easy', 'medium', 'hard'\n  ageGroup: text(\"age_group\").notNull(),\n  instructions: text(\"instructions\"), // JSON string\n  solution: text(\"solution\"), // JSON string\n  estimatedMinutes: integer(\"estimated_minutes\").default(15),\n  points: integer(\"points\").default(100),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  courseId: varchar(\"course_id\").references(() => courses.id),\n  lessonsCompleted: integer(\"lessons_completed\").default(0),\n  projectsCompleted: integer(\"projects_completed\").default(0),\n  totalScore: integer(\"total_score\").default(0),\n  level: integer(\"level\").default(1),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  code: text(\"code\"),\n  projectType: text(\"project_type\"), // 'blockly', 'javascript', 'microbit'\n  isCompleted: boolean(\"is_completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  badgeType: text(\"badge_type\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  package: one(packages, {\n    fields: [users.packageId],\n    references: [packages.id],\n  }),\n  school: one(schools, {\n    fields: [users.schoolId],\n    references: [schools.id],\n  }),\n  parentRelations: many(parentChildRelations, {\n    relationName: \"parentRelations\",\n  }),\n  childRelations: many(parentChildRelations, {\n    relationName: \"childRelations\",\n  }),\n  courses: many(courses),\n  progress: many(userProgress),\n  projects: many(projects),\n  achievements: many(achievements),\n}));\n\nexport const schoolsRelations = relations(schools, ({ one, many }) => ({\n  package: one(packages, {\n    fields: [schools.packageId],\n    references: [packages.id],\n  }),\n  users: many(users),\n}));\n\nexport const packagesRelations = relations(packages, ({ many }) => ({\n  users: many(users),\n  schools: many(schools),\n}));\n\nexport const parentChildRelationsRelations = relations(parentChildRelations, ({ one }) => ({\n  parent: one(users, {\n    fields: [parentChildRelations.parentUserId],\n    references: [users.id],\n    relationName: \"parentRelations\",\n  }),\n  child: one(users, {\n    fields: [parentChildRelations.childUserId],\n    references: [users.id],\n    relationName: \"childRelations\",\n  }),\n}));\n\n// Insert schemas\nexport const insertPackageSchema = createInsertSchema(packages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSchoolSchema = createInsertSchema(schools).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLoginAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertParentChildRelationSchema = createInsertSchema(parentChildRelations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRoboticsActivitySchema = createInsertSchema(roboticsActivities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  earnedAt: true,\n});\n\n// Types\nexport type Package = typeof packages.$inferSelect;\nexport type School = typeof schools.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type ParentChildRelation = typeof parentChildRelations.$inferSelect;\nexport type Course = typeof courses.$inferSelect;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type RoboticsActivity = typeof roboticsActivities.$inferSelect;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type Project = typeof projects.$inferSelect;\nexport type Achievement = typeof achievements.$inferSelect;\n\nexport type InsertPackage = z.infer<typeof insertPackageSchema>;\nexport type InsertSchool = z.infer<typeof insertSchoolSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\nexport type InsertParentChildRelation = z.infer<typeof insertParentChildRelationSchema>;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type InsertRoboticsActivity = z.infer<typeof insertRoboticsActivitySchema>;\nexport type InsertProgress = z.infer<typeof insertProgressSchema>;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\n","size_bytes":11123},"client/src/App.tsx":{"content":"import { useState } from \"react\";\nimport { AuthProvider, useAuth } from \"@/hooks/useAuth\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n\nimport { Navigation } from \"@/components/Navigation\";\nimport { AuthModal } from \"@/components/AuthModal\";\nimport { CodingLabModal } from \"@/components/CodingLabModal\";\nimport { NotificationToast } from \"@/components/NotificationToast\";\nimport { HomePage } from \"@/pages/HomePage\";\nimport { StudentDashboard } from \"@/pages/StudentDashboard\";\nimport { TeacherDashboard } from \"@/pages/TeacherDashboard\";\nimport { ParentDashboard } from \"@/pages/ParentDashboard\";\nimport { Footer } from \"@/components/Footer\";\n\nfunction AppContent() {\n  const { user, loading } = useAuth();\n  const [currentView, setCurrentView] = useState<'dashboard'>('dashboard');\n  const [authModal, setAuthModal] = useState<{\n    isOpen: boolean;\n    mode: 'signin' | 'signup';\n    role?: string;\n    ageGroup?: string;\n  }>({\n    isOpen: false,\n    mode: 'signin'\n  });\n  const [codingLabOpen, setCodingLabOpen] = useState(false);\n  const [notification, setNotification] = useState<{\n    show: boolean;\n    message: string;\n    type: 'success' | 'error' | 'info';\n  }>({\n    show: false,\n    message: '',\n    type: 'info'\n  });\n\n  const openAuthModal = (mode: 'signin' | 'signup', role?: string, ageGroup?: string) => {\n    setAuthModal({ isOpen: true, mode, role, ageGroup });\n  };\n\n  const closeAuthModal = () => {\n    setAuthModal(prev => ({ ...prev, isOpen: false }));\n  };\n\n  const showNotification = (message: string, type: 'success' | 'error' | 'info' = 'info') => {\n    setNotification({ show: true, message, type });\n  };\n\n  const hideNotification = () => {\n    setNotification(prev => ({ ...prev, show: false }));\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading CodewiseHub...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = () => {\n    // Hide home content when users are logged in - show only dashboards\n    if (!user) {\n      return <HomePage onAuthModalOpen={openAuthModal} />;\n    }\n    \n    // Logged in users only see their role-specific dashboard\n    switch (user.role) {\n      case 'student':\n        return <StudentDashboard onCodingLabOpen={() => setCodingLabOpen(true)} />;\n      case 'teacher':\n        return <TeacherDashboard />;\n      case 'parent':\n        return <ParentDashboard />;\n      case 'school_admin':\n        return <SchoolAdminDashboard user={user} />;\n      default:\n        return <HomePage onAuthModalOpen={openAuthModal} />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 font-poppins\">\n      {/* External Font Awesome and Scripts */}\n      <link \n        rel=\"stylesheet\" \n        href=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css\" \n      />\n      \n      <Navigation \n        onAuthModalOpen={openAuthModal}\n        onCodingLabOpen={() => setCodingLabOpen(true)}\n\n      />\n      \n      {renderContent()}\n\n      <AuthModal\n        isOpen={authModal.isOpen}\n        mode={authModal.mode}\n        initialRole={authModal.role}\n        initialAgeGroup={authModal.ageGroup}\n        onClose={closeAuthModal}\n        onSuccess={showNotification}\n      />\n\n      <CodingLabModal\n        isOpen={codingLabOpen}\n        onClose={() => setCodingLabOpen(false)}\n      />\n\n      <NotificationToast\n        show={notification.show}\n        message={notification.message}\n        type={notification.type}\n        onClose={hideNotification}\n      />\n\n      <Toaster />\n      \n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <AppContent />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4213},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Custom colors */\n  --student-gradient-start: hsl(325, 92%, 81%);\n  --student-gradient-end: hsl(318, 100%, 95%);\n  --teacher-gradient-start: hsl(175, 79%, 75%);\n  --teacher-gradient-end: hsl(322, 76%, 94%);\n  --parent-gradient-start: hsl(255, 29%, 41%);\n  --parent-gradient-end: hsl(255, 40%, 63%);\n  --hero-gradient-start: hsl(235, 77%, 71%);\n  --hero-gradient-end: hsl(255, 29%, 41%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Poppins', sans-serif;\n  }\n}\n\n@layer components {\n  .gradient-bg {\n    background: linear-gradient(135deg, var(--hero-gradient-start) 0%, var(--hero-gradient-end) 100%);\n  }\n  \n  .student-gradient {\n    background: linear-gradient(135deg, var(--student-gradient-start) 0%, var(--student-gradient-end) 100%);\n  }\n  \n  .teacher-gradient {\n    background: linear-gradient(135deg, var(--teacher-gradient-start) 0%, var(--teacher-gradient-end) 100%);\n  }\n  \n  .parent-gradient {\n    background: linear-gradient(135deg, var(--parent-gradient-start) 0%, var(--parent-gradient-end) 100%);\n  }\n  \n  .bounce-animation {\n    animation: bounce 2s infinite;\n  }\n  \n  .course-card {\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n  }\n  \n  .course-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);\n  }\n  \n  .role-selector, .age-selector {\n    cursor: pointer;\n    transition: all 0.3s ease;\n  }\n  \n  .role-selector:hover, .age-selector:hover {\n    transform: scale(1.05);\n  }\n  \n  .blockly-container, .monaco-container {\n    height: 400px;\n    width: 100%;\n    border: 2px solid hsl(20, 5.9%, 90%);\n    border-radius: 8px;\n  }\n  \n  .microbit-simulator {\n    background: hsl(220, 13%, 18%);\n    border-radius: 12px;\n    padding: 20px;\n    color: white;\n  }\n  \n  .led-grid {\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    gap: 4px;\n    margin: 20px 0;\n  }\n  \n  .led {\n    width: 20px;\n    height: 20px;\n    background: hsl(211, 10%, 39%);\n    border-radius: 2px;\n    transition: all 0.3s ease;\n    cursor: pointer;\n  }\n  \n  .led.active {\n    background: hsl(0, 81%, 63%);\n    box-shadow: 0 0 10px hsl(0, 81%, 63%);\n  }\n  \n  .progress-ring {\n    transform: rotate(-90deg);\n  }\n  \n  .progress-ring-circle {\n    stroke-dasharray: 251.2;\n    stroke-dashoffset: 251.2;\n    transition: stroke-dashoffset 0.5s ease;\n  }\n  \n  .dashboard-card {\n    background: white;\n    border-radius: 12px;\n    padding: 1.5rem;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    transition: transform 0.3s ease;\n  }\n  \n  .dashboard-card:hover {\n    transform: translateY(-2px);\n  }\n  \n  .achievement-badge {\n    display: inline-block;\n    padding: 0.25rem 0.75rem;\n    background: hsl(55, 92%, 88%);\n    color: hsl(32, 95%, 44%);\n    border-radius: 9999px;\n    font-size: 0.75rem;\n    font-weight: 500;\n    margin: 0.25rem;\n  }\n  \n  .achievement-badge.earned {\n    background: hsl(138, 76%, 88%);\n    color: hsl(145, 63%, 20%);\n  }\n  \n  .editor-tabs {\n    display: flex;\n    background: hsl(210, 17%, 95%);\n    border-radius: 8px 8px 0 0;\n    overflow: hidden;\n  }\n  \n  .editor-tab {\n    padding: 12px 24px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    border-bottom: 2px solid transparent;\n  }\n  \n  .editor-tab.active {\n    background: white;\n    border-bottom-color: hsl(207, 90%, 54%);\n    color: hsl(207, 90%, 54%);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 50%, 80%, 100% { \n    transform: translateY(0); \n  }\n  40% { \n    transform: translateY(-10px); \n  }\n  60% { \n    transform: translateY(-5px); \n  }\n}\n","size_bytes":5256},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { PackageSelector } from \"@/components/PackageSelector\";\n\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  mode: 'signin' | 'signup';\n  initialRole?: string;\n  initialAgeGroup?: string;\n  onClose: () => void;\n  onSuccess: (message: string) => void;\n}\n\nexport function AuthModal({ isOpen, mode: initialMode, initialRole, initialAgeGroup, onClose, onSuccess }: AuthModalProps) {\n  const [mode, setMode] = useState<'signin' | 'signup'>(initialMode);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    name: '',\n    role: initialRole || '',\n    ageGroup: initialAgeGroup || '6-11',\n    childName: '',\n    schoolName: '',\n    packageId: ''\n  });\n  \n  const { signIn, signUp } = useAuth();\n\n  if (!isOpen) return null;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      if (mode === 'signin') {\n        await signIn(formData.email, formData.password);\n        onSuccess('Successfully signed in!');\n      } else {\n        await signUp(\n          formData.email, \n          formData.password, \n          formData.name, \n          formData.role,\n          formData.role === 'student' ? formData.ageGroup : undefined,\n          formData.role === 'parent' ? formData.childName : undefined,\n          formData.role === 'school_admin' ? formData.schoolName : undefined,\n          (formData.role === 'student' || formData.role === 'school_admin') ? formData.packageId : undefined\n        );\n        onSuccess('Successfully signed up!');\n      }\n      onClose();\n    } catch (error) {\n      console.error('Auth error:', error);\n      alert(`Authentication failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  };\n\n  const switchMode = (newMode: 'signin' | 'signup') => {\n    setMode(newMode);\n    setFormData({\n      email: '',\n      password: '',\n      name: '',\n      role: initialRole || '',\n      ageGroup: initialAgeGroup || '6-11',\n      childName: '',\n      schoolName: '',\n      packageId: ''\n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-2xl p-8 max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-2xl font-bold\">{mode === 'signin' ? 'Sign In' : 'Sign Up'}</h2>\n          <button \n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n            data-testid=\"button-close-auth\"\n          >\n            <i className=\"fa-solid fa-times text-xl\"></i>\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {mode === 'signup' && (\n            <>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Role</label>\n                <select \n                  required \n                  value={formData.role}\n                  onChange={(e) => setFormData({...formData, role: e.target.value})}\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  data-testid=\"select-role\"\n                >\n                  <option value=\"\">Select your role</option>\n                  <option value=\"student\">Student</option>\n                  <option value=\"teacher\">Teacher</option>\n                  <option value=\"parent\">Parent</option>\n                  <option value=\"school_admin\">School Administrator</option>\n                </select>\n              </div>\n\n              {formData.role === 'student' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Age Group</label>\n                  <select \n                    value={formData.ageGroup}\n                    onChange={(e) => setFormData({...formData, ageGroup: e.target.value})}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    data-testid=\"select-age-group\"\n                  >\n                    <option value=\"6-11\">Little Coders (6-11 years)</option>\n                    <option value=\"12-17\">Teen Coders (12-17 years)</option>\n                  </select>\n                </div>\n              )}\n\n              {formData.role === 'parent' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Child's Name</label>\n                  <input \n                    type=\"text\" \n                    value={formData.childName}\n                    onChange={(e) => setFormData({...formData, childName: e.target.value})}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\" \n                    placeholder=\"Enter your child's name\"\n                    data-testid=\"input-child-name\"\n                  />\n                </div>\n              )}\n\n              {formData.role === 'school_admin' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">School Name</label>\n                  <input \n                    type=\"text\" \n                    value={formData.schoolName}\n                    onChange={(e) => setFormData({...formData, schoolName: e.target.value})}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\" \n                    placeholder=\"Enter your school's name\"\n                    data-testid=\"input-school-name\"\n                  />\n                </div>\n              )}\n\n              {(formData.role === 'student' || formData.role === 'school_admin') && (\n                <div className=\"mb-6\">\n                  <p className=\"text-sm text-gray-600 mb-2\">\n                    Role: {formData.role} → Package type: {formData.role === 'school_admin' ? 'school' : 'individual'}\n                  </p>\n                  <PackageSelector\n                    packageType={formData.role === 'school_admin' ? 'school' : 'individual'}\n                    selectedPackageId={formData.packageId}\n                    onPackageSelect={(packageId) => setFormData({...formData, packageId})}\n                  />\n                </div>\n              )}\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Name</label>\n                <input \n                  type=\"text\" \n                  required \n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  data-testid=\"input-name\"\n                />\n              </div>\n            </>\n          )}\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n            <input \n              type=\"email\" \n              required \n              value={formData.email}\n              onChange={(e) => setFormData({...formData, email: e.target.value})}\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              data-testid=\"input-email\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Password</label>\n            <input \n              type=\"password\" \n              required \n              value={formData.password}\n              onChange={(e) => setFormData({...formData, password: e.target.value})}\n              className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              data-testid=\"input-password\"\n            />\n          </div>\n\n          <button \n            type=\"submit\" \n            disabled={mode === 'signup' && (formData.role === 'student' || formData.role === 'school_admin') && !formData.packageId}\n            className={`w-full py-3 rounded-lg font-semibold transition ${\n              mode === 'signin' \n                ? 'bg-blue-500 text-white hover:bg-blue-600' \n                : (mode === 'signup' && (formData.role === 'student' || formData.role === 'school_admin') && !formData.packageId)\n                  ? 'bg-gray-400 text-white cursor-not-allowed'\n                  : 'bg-green-500 text-white hover:bg-green-600'\n            }`}\n            data-testid={mode === 'signin' ? 'button-signin' : 'button-signup'}\n          >\n            {mode === 'signin' ? 'Sign In' : 'Sign Up'}\n          </button>\n\n\n\n          <div className=\"text-center mt-4\">\n            <button \n              type=\"button\" \n              onClick={() => switchMode(mode === 'signin' ? 'signup' : 'signin')}\n              className=\"text-blue-500 hover:text-blue-600\"\n              data-testid=\"button-switch-mode\"\n            >\n              {mode === 'signin' ? \"Don't have an account? Sign up\" : 'Already have an account? Sign in'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":9330},"client/src/components/CodingLabModal.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { MicrobitSimulator } from \"./MicrobitSimulator\";\nimport Editor from \"@monaco-editor/react\";\n\ninterface CodingLabModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface CodeBlock {\n  id: string;\n  type: string;\n  value: string;\n  children?: CodeBlock[];\n  condition?: CodeBlock;\n}\n\nexport function CodingLabModal({ isOpen, onClose }: CodingLabModalProps) {\n  const [activeTab, setActiveTab] = useState<'blocks' | 'code' | 'microbit'>('blocks');\n  const [codeOutput, setCodeOutput] = useState<string[]>([]);\n  const [currentCode, setCurrentCode] = useState('// Welcome to CodewiseHub!\\n// Try typing: console.log(\"Hello, World!\");\\n\\nconsole.log(\"Welcome to coding!\");');\n  const [codeBlocks, setCodeBlocks] = useState<CodeBlock[]>([]);\n  const [draggedBlock, setDraggedBlock] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  if (!isOpen) return null;\n\n  const showMicrobitTab = user?.role === 'student' && user?.ageGroup === '6-11';\n\n  // Enhanced Scratch-like block types with visual programming\n  const availableBlocks = [\n    // Basic blocks - Blue family\n    { type: 'print', label: 'Say', value: 'Hello, World!', color: 'bg-blue-500', category: 'Basic', shape: 'rounded' },\n    { type: 'number', label: 'Number', value: '42', color: 'bg-blue-600', category: 'Basic', shape: 'oval' },\n    { type: 'text', label: 'Text', value: 'Hello', color: 'bg-blue-700', category: 'Basic', shape: 'oval' },\n    { type: 'math', label: 'Math Operation', value: '1 + 1', color: 'bg-blue-800', category: 'Basic', shape: 'oval' },\n    { type: 'variable', label: 'Set Variable', value: 'myVar = 10', color: 'bg-blue-400', category: 'Basic', shape: 'rounded' },\n    \n    // Micro:bit specific blocks - Green family\n    { type: 'show_icon', label: 'Show Icon', value: 'heart', color: 'bg-green-500', category: 'Display', shape: 'rounded' },\n    { type: 'show_text', label: 'Show Text', value: 'Hello', color: 'bg-green-600', category: 'Display', shape: 'rounded' },\n    { type: 'clear_screen', label: 'Clear Screen', value: '', color: 'bg-green-700', category: 'Display', shape: 'rounded' },\n    { type: 'led_on', label: 'LED On', value: '2,3', color: 'bg-green-800', category: 'Display', shape: 'rounded' },\n    { type: 'led_off', label: 'LED Off', value: '2,3', color: 'bg-green-900', category: 'Display', shape: 'rounded' },\n    \n    // Input blocks - Purple family\n    { type: 'button_a', label: 'When Button A Pressed', value: '', color: 'bg-purple-500', category: 'Input', shape: 'hat' },\n    { type: 'button_b', label: 'When Button B Pressed', value: '', color: 'bg-purple-600', category: 'Input', shape: 'hat' },\n    { type: 'on_shake', label: 'When Shaken', value: '', color: 'bg-purple-700', category: 'Input', shape: 'hat' },\n    { type: 'button_pressed', label: 'Button A Pressed?', value: '', color: 'bg-purple-400', category: 'Input', shape: 'boolean' },\n    \n    // Control blocks - Orange family (Scratch-like)\n    { type: 'repeat', label: 'Repeat', value: '10', color: 'bg-orange-500', category: 'Control', shape: 'c-block' },\n    { type: 'forever', label: 'Forever', value: '', color: 'bg-orange-600', category: 'Control', shape: 'c-block' },\n    { type: 'wait', label: 'Wait', value: '1', color: 'bg-orange-700', category: 'Control', shape: 'rounded' },\n    { type: 'if', label: 'If', value: '', color: 'bg-orange-800', category: 'Control', shape: 'c-block' },\n    { type: 'if_else', label: 'If Else', value: '', color: 'bg-orange-900', category: 'Control', shape: 'c-block' },\n    { type: 'wait_until', label: 'Wait Until', value: '', color: 'bg-orange-400', category: 'Control', shape: 'rounded' },\n    \n    // Logic blocks - Pink family  \n    { type: 'equals', label: 'Equals', value: '= ', color: 'bg-pink-500', category: 'Logic', shape: 'boolean' },\n    { type: 'greater_than', label: 'Greater Than', value: '> ', color: 'bg-pink-600', category: 'Logic', shape: 'boolean' },\n    { type: 'less_than', label: 'Less Than', value: '< ', color: 'bg-pink-700', category: 'Logic', shape: 'boolean' },\n    { type: 'and', label: 'And', value: '', color: 'bg-pink-800', category: 'Logic', shape: 'boolean' },\n    { type: 'or', label: 'Or', value: '', color: 'bg-pink-900', category: 'Logic', shape: 'boolean' },\n    { type: 'not', label: 'Not', value: '', color: 'bg-pink-400', category: 'Logic', shape: 'boolean' },\n    \n    // Sensor blocks - Teal family\n    { type: 'temperature', label: 'Temperature', value: '', color: 'bg-teal-500', category: 'Sensors', shape: 'oval' },\n    { type: 'light_level', label: 'Light Level', value: '', color: 'bg-teal-600', category: 'Sensors', shape: 'oval' },\n    { type: 'compass', label: 'Compass Heading', value: '', color: 'bg-teal-700', category: 'Sensors', shape: 'oval' },\n    { type: 'accelerometer', label: 'Acceleration', value: 'x', color: 'bg-teal-800', category: 'Sensors', shape: 'oval' },\n  ];\n\n  const blockCategories = ['Basic', 'Display', 'Input', 'Control', 'Logic', 'Sensors'];\n\n  const handleDragStart = (blockType: string) => {\n    setDraggedBlock(blockType);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (draggedBlock) {\n      const blockTemplate = availableBlocks.find(b => b.type === draggedBlock);\n      if (blockTemplate) {\n        const newBlock: CodeBlock = {\n          id: Date.now().toString(),\n          type: blockTemplate.type as any,\n          value: blockTemplate.value\n        };\n        setCodeBlocks(prev => [...prev, newBlock]);\n        setTimeout(() => updateGeneratedCode(), 100);\n      }\n      setDraggedBlock(null);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const generateCodeFromBlocks = (blocks: CodeBlock[], indent: number = 0): string => {\n    const indentStr = '  '.repeat(indent);\n    let code = '';\n    \n    blocks.forEach(block => {\n      switch (block.type) {\n        case 'print':\n          code += `${indentStr}console.log(\"${block.value}\");\\n`;\n          break;\n        case 'number':\n        case 'text':\n          code += `${indentStr}${block.value}\\n`;\n          break;\n        case 'math':\n          code += `${indentStr}console.log(${block.value});\\n`;\n          break;\n        case 'variable':\n          code += `${indentStr}${block.value};\\n`;\n          break;\n        case 'show_icon':\n          code += `${indentStr}microbit.showIcon(\"${block.value}\");\\n`;\n          break;\n        case 'show_text':\n          code += `${indentStr}microbit.showText(\"${block.value}\");\\n`;\n          break;\n        case 'clear_screen':\n          code += `${indentStr}microbit.clearScreen();\\n`;\n          break;\n        case 'led_on':\n          const [x, y] = block.value.split(',').map(n => parseInt(n.trim()));\n          code += `${indentStr}microbit.plot(${x || 0}, ${y || 0});\\n`;\n          break;\n        case 'led_off':\n          const [x2, y2] = block.value.split(',').map(n => parseInt(n.trim()));\n          code += `${indentStr}microbit.unplot(${x2 || 0}, ${y2 || 0});\\n`;\n          break;\n        case 'button_a':\n          code += `${indentStr}input.onButtonPressed(Button.A, () => {\\n`;\n          if (block.children) {\n            code += generateCodeFromBlocks(block.children, indent + 1);\n          }\n          code += `${indentStr}});\\n`;\n          break;\n        case 'button_b':\n          code += `${indentStr}input.onButtonPressed(Button.B, () => {\\n`;\n          if (block.children) {\n            code += generateCodeFromBlocks(block.children, indent + 1);\n          }\n          code += `${indentStr}});\\n`;\n          break;\n        case 'on_shake':\n          code += `${indentStr}input.onGesture(Gesture.Shake, () => {\\n`;\n          if (block.children) {\n            code += generateCodeFromBlocks(block.children, indent + 1);\n          }\n          code += `${indentStr}});\\n`;\n          break;\n        case 'repeat':\n          code += `${indentStr}for (let i = 0; i < ${block.value || 10}; i++) {\\n`;\n          if (block.children) {\n            code += generateCodeFromBlocks(block.children, indent + 1);\n          }\n          code += `${indentStr}}\\n`;\n          break;\n        case 'forever':\n          code += `${indentStr}basic.forever(() => {\\n`;\n          if (block.children) {\n            code += generateCodeFromBlocks(block.children, indent + 1);\n          }\n          code += `${indentStr}});\\n`;\n          break;\n        case 'wait':\n          code += `${indentStr}basic.pause(${(parseFloat(block.value) || 1) * 1000});\\n`;\n          break;\n        case 'if':\n          const condition = block.condition ? generateConditionCode(block.condition) : 'true';\n          code += `${indentStr}if (${condition}) {\\n`;\n          if (block.children) {\n            code += generateCodeFromBlocks(block.children, indent + 1);\n          }\n          code += `${indentStr}}\\n`;\n          break;\n        case 'if_else':\n          const ifCondition = block.condition ? generateConditionCode(block.condition) : 'true';\n          code += `${indentStr}if (${ifCondition}) {\\n`;\n          if (block.children && block.children[0]) {\n            code += generateCodeFromBlocks([block.children[0]], indent + 1);\n          }\n          code += `${indentStr}} else {\\n`;\n          if (block.children && block.children[1]) {\n            code += generateCodeFromBlocks([block.children[1]], indent + 1);\n          }\n          code += `${indentStr}}\\n`;\n          break;\n        case 'temperature':\n          code += `${indentStr}input.temperature()\\n`;\n          break;\n        case 'light_level':\n          code += `${indentStr}input.lightLevel()\\n`;\n          break;\n        case 'compass':\n          code += `${indentStr}input.compassHeading()\\n`;\n          break;\n        case 'accelerometer':\n          code += `${indentStr}input.acceleration(Dimension.${block.value.toUpperCase() || 'X'})\\n`;\n          break;\n      }\n    });\n    \n    return code;\n  };\n\n  const generateConditionCode = (condition: CodeBlock): string => {\n    switch (condition.type) {\n      case 'equals':\n        return `${condition.value} === ${condition.children?.[0]?.value || 'true'}`;\n      case 'greater_than':\n        return `${condition.value} > ${condition.children?.[0]?.value || '0'}`;\n      case 'less_than':\n        return `${condition.value} < ${condition.children?.[0]?.value || '0'}`;\n      case 'button_pressed':\n        return 'input.buttonIsPressed(Button.A)';\n      case 'and':\n        return `(${condition.children?.[0] ? generateConditionCode(condition.children[0]) : 'true'}) && (${condition.children?.[1] ? generateConditionCode(condition.children[1]) : 'true'})`;\n      case 'or':\n        return `(${condition.children?.[0] ? generateConditionCode(condition.children[0]) : 'false'}) || (${condition.children?.[1] ? generateConditionCode(condition.children[1]) : 'false'})`;\n      case 'not':\n        return `!(${condition.children?.[0] ? generateConditionCode(condition.children[0]) : 'false'})`;\n      default:\n        return condition.value || 'true';\n    }\n  };\n\n  const updateGeneratedCode = () => {\n    let code = '// Generated from Scratch-like blocks\\n\\n';\n    code += generateCodeFromBlocks(codeBlocks);\n    setCurrentCode(code);\n  };\n\n  const removeBlock = (blockId: string) => {\n    const newBlocks = codeBlocks.filter(b => b.id !== blockId);\n    setCodeBlocks(newBlocks);\n    setTimeout(() => updateGeneratedCode(), 100);\n  };\n\n  const updateBlockValue = (blockId: string, newValue: string) => {\n    const newBlocks = codeBlocks.map(b => \n      b.id === blockId ? { ...b, value: newValue } : b\n    );\n    setCodeBlocks(newBlocks);\n    setTimeout(() => updateGeneratedCode(), 100);\n  };\n\n  // Custom console.log implementation for output\n  const executeCode = () => {\n    const output: string[] = [];\n    const originalConsoleLog = console.log;\n    \n    // Override console.log to capture output\n    console.log = (...args: any[]) => {\n      output.push(args.map(arg => String(arg)).join(' '));\n    };\n\n    try {\n      // Execute the code\n      const wrappedCode = `\n        (function() {\n          ${currentCode}\n        })();\n      `;\n      eval(wrappedCode);\n      \n      if (output.length === 0) {\n        output.push('Code executed successfully (no output)');\n      }\n    } catch (error) {\n      output.push(`Error: ${error instanceof Error ? error.message : String(error)}`);\n    } finally {\n      // Restore original console.log\n      console.log = originalConsoleLog;\n    }\n\n    setCodeOutput(prev => [...prev, ...output.map(line => `> ${line}`)]);\n  };\n\n  const clearOutput = () => {\n    setCodeOutput([]);\n  };\n\n  const runBlocksCode = () => {\n    executeCode();\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-2xl max-w-[95%] max-h-[95%] w-full h-full overflow-hidden\">\n        <div className=\"flex justify-between items-center p-6 border-b\">\n          <h2 className=\"text-2xl font-bold\">Coding Lab</h2>\n          <button \n            onClick={onClose}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <i className=\"fa-solid fa-times text-2xl\"></i>\n          </button>\n        </div>\n        \n        {/* Editor Tabs */}\n        <div className=\"editor-tabs\">\n          <div \n            className={`editor-tab ${activeTab === 'blocks' ? 'active' : ''}`}\n            onClick={() => setActiveTab('blocks')}\n          >\n            <i className=\"fa-solid fa-puzzle-piece mr-2\"></i>Blocks\n          </div>\n          <div \n            className={`editor-tab ${activeTab === 'code' ? 'active' : ''}`}\n            onClick={() => setActiveTab('code')}\n          >\n            <i className=\"fa-solid fa-code mr-2\"></i>Code\n          </div>\n          {showMicrobitTab && (\n            <div \n              className={`editor-tab ${activeTab === 'microbit' ? 'active' : ''}`}\n              onClick={() => setActiveTab('microbit')}\n            >\n              <i className=\"fa-solid fa-microchip mr-2\"></i>Micro:bit\n            </div>\n          )}\n        </div>\n\n        {/* Editor Content */}\n        <div className=\"flex-1 bg-white rounded-b-lg overflow-hidden\" style={{ height: 'calc(100% - 140px)' }}>\n          {activeTab === 'blocks' && (\n            <div className=\"h-full flex\">\n              {/* Enhanced Block Palette with Categories */}\n              <div className=\"w-80 border-r border-gray-300 p-4 overflow-y-auto\">\n                <h3 className=\"text-lg font-bold mb-4\">Block Palette</h3>\n                {blockCategories.map((category) => (\n                  <div key={category} className=\"mb-6\">\n                    <h4 className=\"font-semibold text-sm uppercase tracking-wide text-gray-600 mb-3\">{category}</h4>\n                    <div className=\"space-y-2\">\n                      {availableBlocks\n                        .filter(block => block.category === category)\n                        .map((block) => (\n                          <div\n                            key={block.type}\n                            draggable\n                            onDragStart={() => handleDragStart(block.type)}\n                            className={`${block.color} text-white px-3 py-2 rounded-lg cursor-grab hover:opacity-80 transition select-none shadow-md transform hover:scale-105`}\n                          >\n                            <div className=\"font-semibold text-sm\">{block.label}</div>\n                            {block.value && (\n                              <div className=\"text-xs opacity-75 mt-1\">{block.value}</div>\n                            )}\n                          </div>\n                        ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Block Workspace */}\n              <div className=\"flex-1 p-4\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold\">Visual Programming</h3>\n                  <button\n                    onClick={runBlocksCode}\n                    className=\"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition\"\n                  >\n                    <i className=\"fa-solid fa-play mr-2\"></i>Run Blocks\n                  </button>\n                </div>\n                \n                <div \n                  className=\"w-full bg-gray-50 rounded-lg border-2 border-dashed border-gray-300 p-6 min-h-96\"\n                  style={{ height: 'calc(100% - 60px)' }}\n                  onDrop={handleDrop}\n                  onDragOver={handleDragOver}\n                >\n                  {codeBlocks.length === 0 ? (\n                    <div className=\"text-center text-gray-500 mt-20\">\n                      <i className=\"fa-solid fa-puzzle-piece text-4xl mb-4\"></i>\n                      <p>Drag blocks here to build your program</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {codeBlocks.map((block, index) => {\n                        const blockDef = availableBlocks.find(b => b.type === block.type);\n                        return (\n                          <div key={block.id} className=\"flex items-center space-x-3 group\">\n                            <div className=\"text-gray-500 font-mono text-sm w-8\">{index + 1}.</div>\n                            <div className={`${blockDef?.color} text-white px-4 py-3 rounded-lg flex-1 shadow-lg transform transition-all hover:scale-102`}>\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex-1\">\n                                  <div className=\"font-semibold flex items-center\">\n                                    <span className=\"mr-2\">🧩</span>\n                                    {blockDef?.label}\n                                  </div>\n                                  {!['clear_screen', 'button_a', 'button_b', 'on_shake'].includes(block.type) && (\n                                    <input\n                                      type=\"text\"\n                                      value={block.value}\n                                      onChange={(e) => updateBlockValue(block.id, e.target.value)}\n                                      className=\"bg-white bg-opacity-20 text-white placeholder-white placeholder-opacity-50 border border-white border-opacity-30 rounded px-2 py-1 text-sm mt-2 w-full focus:bg-opacity-30 focus:outline-none\"\n                                      placeholder={\n                                        block.type === 'show_icon' ? 'heart, smile, arrow' :\n                                        block.type === 'repeat' ? 'Number of times' :\n                                        block.type === 'wait' ? 'Seconds to wait' :\n                                        block.type === 'if' ? 'Condition' :\n                                        'Enter value...'\n                                      }\n                                    />\n                                  )}\n                                </div>\n                                <button\n                                  onClick={() => removeBlock(block.id)}\n                                  className=\"text-white hover:text-red-200 ml-3 opacity-0 group-hover:opacity-100 transition-opacity\"\n                                >\n                                  <i className=\"fa-solid fa-times\"></i>\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              {/* Output Console for Blocks */}\n              <div className=\"w-80 border-l border-gray-300 p-4\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold\">Output</h3>\n                  <button\n                    onClick={clearOutput}\n                    className=\"bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition\"\n                  >\n                    Clear\n                  </button>\n                </div>\n                <div className=\"bg-gray-900 text-green-400 rounded-lg p-4 h-96 overflow-y-auto font-mono text-sm\">\n                  {codeOutput.length === 0 ? (\n                    <div className=\"text-gray-500\">Output will appear here...</div>\n                  ) : (\n                    codeOutput.map((line, index) => (\n                      <div key={index} className=\"mb-1\">{line}</div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'code' && (\n            <div className=\"h-full flex\">\n              {/* Monaco Code Editor */}\n              <div className=\"flex-1 p-4\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold\">Code Editor</h3>\n                  <button\n                    onClick={executeCode}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition\"\n                  >\n                    <i className=\"fa-solid fa-play mr-2\"></i>Run Code\n                  </button>\n                </div>\n                <div className=\"rounded-lg border border-gray-300\" style={{ height: 'calc(100% - 60px)' }}>\n                  <Editor\n                    height=\"100%\"\n                    defaultLanguage=\"javascript\"\n                    value={currentCode}\n                    onChange={(value) => setCurrentCode(value || '')}\n                    theme=\"vs-dark\"\n                    options={{\n                      minimap: { enabled: false },\n                      fontSize: 14,\n                      lineNumbers: 'on',\n                      wordWrap: 'on',\n                      automaticLayout: true,\n                      scrollBeyondLastLine: false,\n                      tabSize: 2,\n                    }}\n                  />\n                </div>\n              </div>\n              \n              {/* Output Console for Code */}\n              <div className=\"w-80 border-l border-gray-300 p-4\">\n                <div className=\"flex justify-between items-center mb-4\">\n                  <h3 className=\"text-lg font-bold\">Console Output</h3>\n                  <button\n                    onClick={clearOutput}\n                    className=\"bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition\"\n                  >\n                    Clear\n                  </button>\n                </div>\n                <div className=\"bg-gray-900 text-green-400 rounded-lg p-4 h-96 overflow-y-auto font-mono text-sm\">\n                  {codeOutput.length === 0 ? (\n                    <div className=\"text-gray-500\">Console output will appear here...</div>\n                  ) : (\n                    codeOutput.map((line, index) => (\n                      <div key={index} className=\"mb-1\">{line}</div>\n                    ))\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'microbit' && (\n            <div className=\"h-full overflow-y-auto\">\n              <div className=\"grid lg:grid-cols-3 gap-6 p-6\">\n                {/* Micro:bit Blocks */}\n                <div className=\"lg:col-span-2\">\n                  <h3 className=\"font-bold mb-4\">Drag blocks to create your program:</h3>\n                  <div className=\"space-y-4\">\n                    {/* Basic Blocks */}\n                    <div className=\"bg-blue-100 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-blue-800 mb-2\">Basic</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <div className=\"bg-blue-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-blue-600 transition\">\n                          Show Icon\n                        </div>\n                        <div className=\"bg-blue-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-blue-600 transition\">\n                          Show String\n                        </div>\n                        <div className=\"bg-blue-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-blue-600 transition\">\n                          Clear Screen\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Input Blocks */}\n                    <div className=\"bg-green-100 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-green-800 mb-2\">Input</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <div className=\"bg-green-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-green-600 transition\">\n                          On Button A\n                        </div>\n                        <div className=\"bg-green-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-green-600 transition\">\n                          On Button B\n                        </div>\n                        <div className=\"bg-green-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-green-600 transition\">\n                          On Shake\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* LED Blocks */}\n                    <div className=\"bg-purple-100 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold text-purple-800 mb-2\">LED</h4>\n                      <div className=\"flex flex-wrap gap-2\">\n                        <div className=\"bg-purple-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-purple-600 transition\">\n                          Turn On LED\n                        </div>\n                        <div className=\"bg-purple-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-purple-600 transition\">\n                          Turn Off LED\n                        </div>\n                        <div className=\"bg-purple-500 text-white px-3 py-2 rounded cursor-pointer hover:bg-purple-600 transition\">\n                          Plot Pattern\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Program Workspace */}\n                  <div className=\"mt-6\">\n                    <h4 className=\"font-bold mb-2\">Your Program:</h4>\n                    <div className=\"bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg p-6 min-h-32\">\n                      <p className=\"text-gray-500 text-center\">Drag blocks here to build your program</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Enhanced Micro:bit Simulator */}\n                <div>\n                  <MicrobitSimulator \n                    programCode={currentCode}\n                    onButtonPress={(button) => {\n                      setCodeOutput(prev => [...prev, `> Button ${button} pressed in simulator`]);\n                    }}\n                    onShake={() => {\n                      setCodeOutput(prev => [...prev, `> Device shaken in simulator`]);\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":27478},"client/src/components/MicrobitSimulator.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface MicrobitSimulatorProps {\n  onButtonPress?: (button: 'A' | 'B') => void;\n  onShake?: () => void;\n  programCode?: string;\n}\n\nexport function MicrobitSimulator({ onButtonPress, onShake, programCode }: MicrobitSimulatorProps) {\n  const [ledMatrix, setLedMatrix] = useState<boolean[]>(new Array(25).fill(false));\n  const [consoleOutput, setConsoleOutput] = useState<string[]>(['> Ready to run program...']);\n  const [temperature, setTemperature] = useState(20);\n  const [lightLevel, setLightLevel] = useState(128);\n  const [accelerometer, setAccelerometer] = useState({ x: 0, y: 0, z: 0 });\n  const [compass, setCompass] = useState(0);\n  const [buttonAPressed, setButtonAPressed] = useState(false);\n  const [buttonBPressed, setButtonBPressed] = useState(false);\n  const [isShaking, setIsShaking] = useState(false);\n\n  // Simulate environmental changes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTemperature(prev => Math.max(15, Math.min(35, prev + (Math.random() - 0.5) * 2)));\n      setLightLevel(prev => Math.max(0, Math.min(255, prev + (Math.random() - 0.5) * 20)));\n      setCompass(prev => (prev + (Math.random() - 0.5) * 10) % 360);\n    }, 3000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const toggleLED = (index: number) => {\n    const newMatrix = [...ledMatrix];\n    newMatrix[index] = !newMatrix[index];\n    setLedMatrix(newMatrix);\n    logToConsole(`LED ${Math.floor(index / 5)},${index % 5} ${newMatrix[index] ? 'ON' : 'OFF'}`);\n  };\n\n  const pressButton = (button: 'A' | 'B') => {\n    if (button === 'A') {\n      setButtonAPressed(true);\n      setTimeout(() => setButtonAPressed(false), 200);\n    } else {\n      setButtonBPressed(true);\n      setTimeout(() => setButtonBPressed(false), 200);\n    }\n    \n    logToConsole(`Button ${button} pressed`);\n    onButtonPress?.(button);\n  };\n\n  const simulateShake = () => {\n    setIsShaking(true);\n    setAccelerometer({ x: Math.random() * 2 - 1, y: Math.random() * 2 - 1, z: Math.random() * 2 - 1 });\n    logToConsole('Shake detected!');\n    onShake?.();\n    setTimeout(() => {\n      setIsShaking(false);\n      setAccelerometer({ x: 0, y: 0, z: 0 });\n    }, 500);\n  };\n\n  const showIcon = (pattern: string) => {\n    const patterns: { [key: string]: boolean[] } = {\n      heart: [\n        false, true, false, true, false,\n        true, true, true, true, true,\n        true, true, true, true, true,\n        false, true, true, true, false,\n        false, false, true, false, false\n      ],\n      smile: [\n        false, true, false, true, false,\n        false, true, false, true, false,\n        false, false, false, false, false,\n        true, false, false, false, true,\n        false, true, true, true, false\n      ],\n      arrow: [\n        false, false, true, false, false,\n        false, true, true, true, false,\n        true, false, true, false, true,\n        false, false, true, false, false,\n        false, false, true, false, false\n      ]\n    };\n    \n    if (patterns[pattern]) {\n      setLedMatrix(patterns[pattern]);\n      logToConsole(`Showing ${pattern} icon`);\n    }\n  };\n\n  const clearScreen = () => {\n    setLedMatrix(new Array(25).fill(false));\n    logToConsole('Screen cleared');\n  };\n\n  const showText = (text: string) => {\n    logToConsole(`Displaying: \"${text}\"`);\n    // Simple text display - show first letter pattern\n    if (text.length > 0) {\n      const char = text[0].toUpperCase();\n      if (char === 'A') {\n        setLedMatrix([\n          false, true, true, true, false,\n          true, false, false, false, true,\n          true, true, true, true, true,\n          true, false, false, false, true,\n          true, false, false, false, true\n        ]);\n      } else if (char === 'B') {\n        setLedMatrix([\n          true, true, true, true, false,\n          true, false, false, false, true,\n          true, true, true, true, false,\n          true, false, false, false, true,\n          true, true, true, true, false\n        ]);\n      } else {\n        // Default pattern for other characters\n        setLedMatrix([\n          true, true, true, true, true,\n          true, false, false, false, true,\n          true, false, false, false, true,\n          true, false, false, false, true,\n          true, true, true, true, true\n        ]);\n      }\n    }\n  };\n\n  const runProgram = () => {\n    logToConsole('Running program...');\n    if (programCode) {\n      try {\n        // Simple interpreter for basic micro:bit commands\n        const lines = programCode.split('\\n');\n        lines.forEach((line, index) => {\n          setTimeout(() => {\n            if (line.includes('showIcon')) {\n              const match = line.match(/showIcon\\(['\"`](\\w+)['\"`]\\)/);\n              if (match) showIcon(match[1]);\n            } else if (line.includes('showString') || line.includes('showText')) {\n              const match = line.match(/show(?:String|Text)\\(['\"`]([^'\"`]+)['\"`]\\)/);\n              if (match) showText(match[1]);\n            } else if (line.includes('clearScreen')) {\n              clearScreen();\n            }\n          }, index * 500);\n        });\n      } catch (error) {\n        logToConsole(`Error: ${error}`);\n      }\n    }\n    setTimeout(() => {\n      logToConsole('Program completed successfully!');\n    }, 1000);\n  };\n\n  const downloadHex = () => {\n    logToConsole('Downloading .hex file...');\n    // Create a simple .hex file content\n    const hexContent = `:020000040000FA\n:10000000HELLO MICROBIT PROGRAM\n:00000001FF`;\n    \n    const blob = new Blob([hexContent], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'microbit-program.hex';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const logToConsole = (message: string) => {\n    setConsoleOutput(prev => [...prev, `> ${message}`].slice(-10)); // Keep last 10 messages\n  };\n\n  return (\n    <div className=\"microbit-simulator\">\n      <h3 className=\"text-lg font-bold mb-4\">Micro:bit Simulator</h3>\n      \n      {/* LED Matrix */}\n      <div className=\"led-grid\">\n        {ledMatrix.map((isActive, index) => (\n          <div\n            key={index}\n            className={`led ${isActive ? 'active' : ''}`}\n            onClick={() => toggleLED(index)}\n          />\n        ))}\n      </div>\n\n      {/* Control Buttons */}\n      <div className=\"flex justify-center space-x-4 mb-4\">\n        <button \n          className={`${buttonAPressed ? 'bg-yellow-600 scale-95' : 'bg-yellow-500 hover:bg-yellow-600'} text-white px-4 py-2 rounded font-bold transition transform`}\n          onClick={() => pressButton('A')}\n        >\n          A\n        </button>\n        <button \n          className={`${buttonBPressed ? 'bg-yellow-600 scale-95' : 'bg-yellow-500 hover:bg-yellow-600'} text-white px-4 py-2 rounded font-bold transition transform`}\n          onClick={() => pressButton('B')}\n        >\n          B\n        </button>\n      </div>\n\n      {/* Sensor Simulation */}\n      <div className=\"grid grid-cols-2 gap-2 mb-4 text-xs\">\n        <div className=\"bg-blue-100 p-2 rounded\">\n          <div className=\"font-semibold\">Temperature</div>\n          <div className=\"text-blue-600\">{temperature.toFixed(1)}°C</div>\n        </div>\n        <div className=\"bg-green-100 p-2 rounded\">\n          <div className=\"font-semibold\">Light Level</div>\n          <div className=\"text-green-600\">{lightLevel}/255</div>\n        </div>\n        <div className=\"bg-purple-100 p-2 rounded\">\n          <div className=\"font-semibold\">Compass</div>\n          <div className=\"text-purple-600\">{compass.toFixed(0)}°</div>\n        </div>\n        <div className=\"bg-orange-100 p-2 rounded\">\n          <div className=\"font-semibold\">Accelerometer</div>\n          <div className=\"text-orange-600\">X:{accelerometer.x.toFixed(1)}</div>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"space-y-2\">\n        <button \n          onClick={runProgram}\n          className=\"w-full bg-green-500 text-white py-2 rounded hover:bg-green-600 transition\"\n        >\n          <i className=\"fa-solid fa-play mr-2\"></i>Run Program\n        </button>\n        <button \n          onClick={() => showIcon('heart')}\n          className=\"w-full bg-red-500 text-white py-2 rounded hover:bg-red-600 transition\"\n        >\n          <i className=\"fa-solid fa-heart mr-2\"></i>Show Heart\n        </button>\n        <button \n          onClick={() => showIcon('smile')}\n          className=\"w-full bg-yellow-500 text-white py-2 rounded hover:bg-yellow-600 transition\"\n        >\n          <i className=\"fa-solid fa-smile mr-2\"></i>Show Smile\n        </button>\n        <button \n          onClick={simulateShake}\n          className={`w-full ${isShaking ? 'bg-red-600' : 'bg-orange-500 hover:bg-orange-600'} text-white py-2 rounded transition`}\n        >\n          <i className=\"fa-solid fa-hand-rock mr-2\"></i>Shake Device\n        </button>\n        <button \n          onClick={clearScreen}\n          className=\"w-full bg-gray-500 text-white py-2 rounded hover:bg-gray-600 transition\"\n        >\n          <i className=\"fa-solid fa-eraser mr-2\"></i>Clear Screen\n        </button>\n        <button \n          onClick={downloadHex}\n          className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600 transition\"\n        >\n          <i className=\"fa-solid fa-download mr-2\"></i>Download .hex\n        </button>\n      </div>\n\n      {/* Console Output */}\n      <div className=\"mt-4\">\n        <h4 className=\"text-sm font-bold mb-2\">Console:</h4>\n        <div className=\"bg-black text-green-400 p-2 rounded text-xs font-mono h-20 overflow-y-auto\">\n          {consoleOutput.map((line, index) => (\n            <div key={index}>{line}</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9863},"client/src/components/Navigation.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\n\ninterface NavigationProps {\n  onAuthModalOpen: (mode: 'signin' | 'signup', role?: string, ageGroup?: string) => void;\n  onCodingLabOpen: () => void;\n  currentView?: 'dashboard' | 'admin';\n  onViewChange?: (view: 'dashboard' | 'admin') => void;\n}\n\nexport function Navigation({ onAuthModalOpen, onCodingLabOpen, currentView = 'dashboard', onViewChange }: NavigationProps) {\n  const { user, signOut } = useAuth();\n\n  const handleSignOut = async () => {\n    await signOut();\n  };\n\n  return (\n    <nav className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center text-white font-bold text-lg\">\n                <i className=\"fa-solid fa-code\"></i>\n              </div>\n              <span className=\"ml-2 text-xl font-bold text-gray-800\">CodewiseHub</span>\n            </div>\n          </div>\n          \n          {!user ? (\n            <div className=\"flex items-center space-x-4\">\n              <a href=\"#home\" className=\"text-gray-700 hover:text-blue-600 px-3 py-2 font-medium\">Home</a>\n              <a href=\"#courses\" className=\"text-gray-700 hover:text-blue-600 px-3 py-2 font-medium\">Courses</a>\n              <a href=\"#pricing\" className=\"text-gray-700 hover:text-blue-600 px-3 py-2 font-medium\">Pricing</a>\n              <button \n                onClick={() => onAuthModalOpen('signup')} \n                className=\"bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition\"\n              >\n                <i className=\"fa-solid fa-rocket mr-2\"></i>Sign Up Free\n              </button>\n              <button \n                onClick={() => onAuthModalOpen('signin')} \n                className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition\"\n              >\n                Sign In\n              </button>\n            </div>\n          ) : (\n            <div className=\"flex items-center space-x-4\">\n              {user.role === 'student' && (\n                <button \n                  onClick={onCodingLabOpen}\n                  className=\"bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600 transition\"\n                >\n                  <i className=\"fa-solid fa-laptop-code mr-2\"></i>Coding Lab\n                </button>\n              )}\n              <div className=\"relative group\">\n                <button className=\"flex items-center space-x-2 text-gray-700 hover:text-blue-600\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-bold\">\n                    <i className=\"fa-solid fa-user\"></i>\n                  </div>\n                  <span>{user.name}</span>\n                  <i className=\"fa-solid fa-chevron-down text-xs\"></i>\n                </button>\n                <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200\">\n                  <a href=\"#\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">Profile</a>\n                  <a href=\"#\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\">Settings</a>\n                  <button \n                    onClick={handleSignOut}\n                    className=\"block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100\"\n                  >\n                    Sign Out\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3852},"client/src/components/NotificationToast.tsx":{"content":"import { useEffect, useState } from \"react\";\n\ninterface NotificationProps {\n  message: string;\n  type: 'success' | 'error' | 'info';\n  show: boolean;\n  onClose: () => void;\n}\n\nexport function NotificationToast({ message, type, show, onClose }: NotificationProps) {\n  useEffect(() => {\n    if (show) {\n      const timer = setTimeout(() => {\n        onClose();\n      }, 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [show, onClose]);\n\n  if (!show) return null;\n\n  const bgColor = {\n    success: 'bg-green-500',\n    error: 'bg-red-500',\n    info: 'bg-blue-500'\n  }[type];\n\n  return (\n    <div className={`fixed top-5 right-5 z-50 ${bgColor} text-white px-6 py-4 rounded-lg shadow-lg font-medium transform transition-transform duration-300 ${show ? 'translate-x-0' : 'translate-x-full'}`}>\n      <div className=\"flex items-center justify-between\">\n        <span>{message}</span>\n        <button \n          onClick={onClose}\n          className=\"ml-4 text-white hover:text-gray-200\"\n        >\n          <i className=\"fas fa-times\"></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1092},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport type { User } from \"@shared/schema\";\nimport * as authApi from \"@/lib/auth\";\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string, name: string, role: string, ageGroup?: string, childName?: string, schoolName?: string, packageId?: string) => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session on mount\n    const checkSession = async () => {\n      try {\n        const currentUser = await authApi.getCurrentUser();\n        setUser(currentUser);\n      } catch (error) {\n        console.error('Session check error:', error);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkSession();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    try {\n      const result = await authApi.signIn(email, password);\n      setUser(result.user);\n    } catch (error) {\n      console.error(\"Error signing in:\", error);\n      throw error;\n    }\n  };\n\n  const signUp = async (\n    email: string, \n    password: string, \n    name: string, \n    role: string, \n    ageGroup?: string, \n    childName?: string,\n    schoolName?: string,\n    packageId?: string\n  ) => {\n    try {\n      const result = await authApi.signUp(\n        email,\n        password,\n        name,\n        role,\n        ageGroup,\n        childName,\n        schoolName,\n        packageId\n      );\n      setUser(result.user);\n    } catch (error) {\n      console.error(\"Error signing up:\", error);\n      throw error;\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      await authApi.signOut();\n      setUser(null);\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n      throw error;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, signIn, signUp, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2479},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, signInWithPopup, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, getDoc } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  // These will be set via environment variables in production\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"demo-api-key\",\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || \"codewise-hub.firebaseapp.com\",\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"codewise-hub\",\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || \"codewise-hub.appspot.com\",\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"1:123456789:web:abcdef\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Google Auth provider\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\n\nexport const signInWithGoogle = () => signInWithPopup(auth, googleProvider);\n\nexport { \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword,\n  GoogleAuthProvider \n};\n\n// User profile management\nexport const createUserProfile = async (userAuth: any, additionalData: any = {}) => {\n  if (!userAuth) return;\n  \n  const userRef = doc(db, 'users', userAuth.uid);\n  const snapShot = await getDoc(userRef);\n\n  if (!snapShot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName: displayName || additionalData.name || 'User',\n        name: additionalData.name || displayName || 'User',\n        email,\n        createdAt,\n        role: additionalData.role || 'student',\n        ageGroup: additionalData.ageGroup || '6-11',\n        childName: additionalData.childName || '',\n        schoolName: additionalData.schoolName || '',\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating user profile', error);\n    }\n  }\n\n  return userRef;\n};","size_bytes":2220},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// Support both old and new signatures for compatibility\nexport async function apiRequest(\n  urlOrMethod: string,\n  methodOrData?: string | unknown,\n  data?: unknown,\n): Promise<any> {\n  let url: string;\n  let method: string;\n  let requestData: unknown;\n\n  if (typeof methodOrData === 'string') {\n    // New signature: apiRequest(url, method, data)\n    url = urlOrMethod;\n    method = methodOrData;\n    requestData = data;\n  } else {\n    // Old signature: apiRequest(method, url, data) \n    method = urlOrMethod;\n    url = methodOrData as string;\n    requestData = data;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers: requestData ? { \"Content-Type\": \"application/json\" } : {},\n    body: requestData ? JSON.stringify(requestData) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1873},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/HomePage.tsx":{"content":"import { useState } from 'react';\nimport { CourseExplanationModal } from '@/components/CourseExplanationModal';\nimport type { AgeGroup } from '@/types/user';\n\ninterface HomePageProps {\n  onAuthModalOpen: (mode: 'signin' | 'signup', role?: string, ageGroup?: string) => void;\n}\n\nexport function HomePage({ onAuthModalOpen }: HomePageProps) {\n  const [showCourseExplanation, setShowCourseExplanation] = useState(false);\n  const [selectedAgeGroup, setSelectedAgeGroup] = useState<AgeGroup>('6-11');\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    element?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section id=\"home\" className=\"gradient-bg py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n              Explore. Learn. Code.\n              <span className=\"block text-yellow-300\">Together!</span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-white mb-8 max-w-3xl mx-auto\">\n              Dive into fun, interactive coding adventures designed for young minds. \n              Build amazing projects, learn with AI, and become a coding hero!\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <button \n                onClick={() => onAuthModalOpen('signup')} \n                className=\"bg-yellow-400 text-purple-800 px-8 py-4 rounded-full font-bold text-lg hover:bg-yellow-300 transition bounce-animation\"\n              >\n                <i className=\"fa-solid fa-rocket mr-2\"></i>Start Learning Now - FREE!\n              </button>\n              <button \n                onClick={() => scrollToSection('courses')} \n                className=\"bg-white text-purple-800 px-8 py-4 rounded-full font-bold text-lg hover:bg-gray-100 transition\"\n              >\n                <i className=\"fa-solid fa-play mr-2\"></i>Explore Courses\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Age Selection */}\n      <section id=\"courses\" className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Choose Your Learning Path!</h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Select your age group to discover learning experiences designed just for you\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            {/* Little Coders (6-11) */}\n            <div className=\"age-selector student-gradient p-8 rounded-2xl shadow-lg text-center\">\n              <div className=\"text-6xl mb-4\">🎓</div>\n              <h3 className=\"text-2xl font-bold text-purple-800 mb-4\">Little Coders</h3>\n              <p className=\"text-purple-700 mb-4\">Ages 6-11</p>\n              <div className=\"text-sm text-purple-600 mb-6\">\n                <div className=\"flex items-center justify-center mb-2\">\n                  <i className=\"fa-solid fa-puzzle-piece mr-2\"></i>Visual Block Programming\n                </div>\n                <div className=\"flex items-center justify-center mb-2\">\n                  <i className=\"fa-solid fa-robot mr-2\"></i>Robotics & Animations\n                </div>\n                <div className=\"flex items-center justify-center mb-2\">\n                  <i className=\"fa-solid fa-microchip mr-2\"></i>Micro:bit Adventures\n                </div>\n                <div className=\"flex items-center justify-center\">\n                  <i className=\"fa-solid fa-gamepad mr-2\"></i>Game Creation\n                </div>\n              </div>\n              <div className=\"flex flex-col gap-3\">\n                <button \n                  onClick={() => {\n                    setSelectedAgeGroup('6-11');\n                    setShowCourseExplanation(true);\n                  }}\n                  className=\"bg-purple-200 text-purple-800 px-4 py-2 rounded-lg font-medium hover:bg-purple-300 transition\"\n                  data-testid=\"button-little-coder-info\"\n                >\n                  <i className=\"fa-solid fa-info-circle mr-2\"></i>Learn More About Courses\n                </button>\n                <button \n                  onClick={() => onAuthModalOpen('signup', 'student', '6-11')} \n                  className=\"bg-white text-purple-800 px-6 py-3 rounded-full font-bold hover:bg-gray-100 transition\"\n                  data-testid=\"button-signup-little-coder\"\n                >\n                  Start Adventure\n                </button>\n              </div>\n            </div>\n\n            {/* Teen Coders (12-17) */}\n            <div className=\"age-selector teacher-gradient p-8 rounded-2xl shadow-lg text-center\">\n              <div className=\"text-6xl mb-4\">💻</div>\n              <h3 className=\"text-2xl font-bold text-blue-800 mb-4\">Teen Coders</h3>\n              <p className=\"text-blue-700 mb-4\">Ages 12-17</p>\n              <div className=\"text-sm text-blue-600 mb-6\">\n                <div className=\"flex items-center justify-center mb-2\">\n                  <i className=\"fa-solid fa-code mr-2\"></i>Python & JavaScript\n                </div>\n                <div className=\"flex items-center justify-center mb-2\">\n                  <i className=\"fa-solid fa-globe mr-2\"></i>Web Development\n                </div>\n                <div className=\"flex items-center justify-center mb-2\">\n                  <i className=\"fa-solid fa-mobile-alt mr-2\"></i>App Development\n                </div>\n                <div className=\"flex items-center justify-center\">\n                  <i className=\"fa-solid fa-brain mr-2\"></i>AI & Machine Learning\n                </div>\n              </div>\n              <div className=\"flex flex-col gap-3\">\n                <button \n                  onClick={() => {\n                    setSelectedAgeGroup('12-17');\n                    setShowCourseExplanation(true);\n                  }}\n                  className=\"bg-blue-200 text-blue-800 px-4 py-2 rounded-lg font-medium hover:bg-blue-300 transition\"\n                  data-testid=\"button-teen-coder-info\"\n                >\n                  <i className=\"fa-solid fa-info-circle mr-2\"></i>Learn More About Courses\n                </button>\n                <button \n                  onClick={() => onAuthModalOpen('signup', 'student', '12-17')} \n                  className=\"bg-white text-blue-800 px-6 py-3 rounded-full font-bold hover:bg-gray-100 transition\"\n                  data-testid=\"button-signup-teen-coder\"\n                >\n                  Start Coding\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Role Selection for Teachers/Parents */}\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto mt-12\">\n            {/* Teachers */}\n            <div className=\"role-selector teacher-gradient p-6 rounded-xl shadow-lg text-center\">\n              <div className=\"text-4xl mb-3\">👩‍🏫</div>\n              <h3 className=\"text-xl font-bold text-gray-800 mb-2\">Educators</h3>\n              <p className=\"text-gray-600 mb-4\">Manage students and create courses</p>\n              <button \n                onClick={() => onAuthModalOpen('signup', 'teacher')} \n                className=\"bg-white text-gray-800 px-4 py-2 rounded-full font-semibold hover:bg-gray-100 transition\"\n              >\n                Join as Teacher\n              </button>\n            </div>\n\n            {/* Parents */}\n            <div className=\"role-selector parent-gradient p-6 rounded-xl shadow-lg text-center\">\n              <div className=\"text-4xl mb-3\">👨‍👩‍👧‍👦</div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Parents</h3>\n              <p className=\"text-gray-100 mb-4\">Track your child's progress</p>\n              <button \n                onClick={() => onAuthModalOpen('signup', 'parent')} \n                className=\"bg-white text-gray-800 px-4 py-2 rounded-full font-semibold hover:bg-gray-100 transition\"\n              >\n                Join as Parent\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose CodewiseHub Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Why Choose CodewiseHub?</h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Comprehensive learning platform with age-appropriate content and advanced features\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"text-5xl text-blue-500 mb-4\">\n                <i className=\"fa-solid fa-code\"></i>\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Interactive Coding</h3>\n              <p className=\"text-gray-600\">Visual blocks for beginners, Monaco editor for advanced learners</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-5xl text-green-500 mb-4\">\n                <i className=\"fa-solid fa-robot\"></i>\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Robot Programming</h3>\n              <p className=\"text-gray-600\">Control virtual robots with drag-and-drop programming</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-5xl text-purple-500 mb-4\">\n                <i className=\"fa-solid fa-brain\"></i>\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">AI-Powered Learning</h3>\n              <p className=\"text-gray-600\">Personalized assistance and instant coding help</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-5xl text-orange-500 mb-4\">\n                <i className=\"fa-solid fa-graduation-cap\"></i>\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Age-Appropriate</h3>\n              <p className=\"text-gray-600\">Curriculum designed specifically for different age groups</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-5xl text-red-500 mb-4\">\n                <i className=\"fa-solid fa-chart-line\"></i>\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Progress Tracking</h3>\n              <p className=\"text-gray-600\">Detailed analytics for students, teachers, and parents</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"text-5xl text-cyan-500 mb-4\">\n                <i className=\"fa-solid fa-users\"></i>\n              </div>\n              <h3 className=\"text-xl font-bold mb-4\">Multi-Role Support</h3>\n              <p className=\"text-gray-600\">Separate dashboards for students, teachers, and parents</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-800 mb-4\">Simple, Affordable Pricing</h2>\n            <p className=\"text-lg text-gray-600\">Start free and upgrade as you grow</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {/* Free Plan */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8 text-center\">\n              <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">Free Explorer</h3>\n              <div className=\"text-4xl font-bold text-green-600 mb-4\">R0</div>\n              <p className=\"text-gray-600 mb-6\">Perfect for getting started</p>\n              <ul className=\"text-left space-y-3 mb-8\">\n                <li><i className=\"fa-solid fa-check text-green-500 mr-2\"></i>5 Coding Lessons</li>\n                <li><i className=\"fa-solid fa-check text-green-500 mr-2\"></i>Basic Projects</li>\n                <li><i className=\"fa-solid fa-check text-green-500 mr-2\"></i>Community Support</li>\n                <li><i className=\"fa-solid fa-check text-green-500 mr-2\"></i>Progress Tracking</li>\n              </ul>\n              <button \n                onClick={() => onAuthModalOpen('signup')} \n                className=\"w-full bg-green-500 text-white py-3 rounded-lg font-semibold hover:bg-green-600 transition\"\n              >\n                Start Free\n              </button>\n            </div>\n\n            {/* Basic Plan */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8 text-center border-2 border-blue-500 relative\">\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-blue-500 text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                Most Popular\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">Basic Coder</h3>\n              <div className=\"text-4xl font-bold text-blue-600 mb-4\">R349<span className=\"text-lg\">/month</span></div>\n              <p className=\"text-gray-600 mb-6\">For serious young coders</p>\n              <ul className=\"text-left space-y-3 mb-8\">\n                <li><i className=\"fa-solid fa-check text-blue-500 mr-2\"></i>Unlimited Lessons</li>\n                <li><i className=\"fa-solid fa-check text-blue-500 mr-2\"></i>Advanced Projects</li>\n                <li><i className=\"fa-solid fa-check text-blue-500 mr-2\"></i>AI Tutor Access</li>\n                <li><i className=\"fa-solid fa-check text-blue-500 mr-2\"></i>Certificates</li>\n                <li><i className=\"fa-solid fa-check text-blue-500 mr-2\"></i>Parent Reports</li>\n              </ul>\n              <button className=\"w-full bg-blue-500 text-white py-3 rounded-lg font-semibold hover:bg-blue-600 transition\">\n                Choose Basic\n              </button>\n            </div>\n\n            {/* Premium Plan */}\n            <div className=\"bg-white rounded-2xl shadow-lg p-8 text-center\">\n              <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">Premium Pro</h3>\n              <div className=\"text-4xl font-bold text-purple-600 mb-4\">R699<span className=\"text-lg\">/month</span></div>\n              <p className=\"text-gray-600 mb-6\">Complete learning experience</p>\n              <ul className=\"text-left space-y-3 mb-8\">\n                <li><i className=\"fa-solid fa-check text-purple-500 mr-2\"></i>Everything in Basic</li>\n                <li><i className=\"fa-solid fa-check text-purple-500 mr-2\"></i>1-on-1 Mentoring</li>\n                <li><i className=\"fa-solid fa-check text-purple-500 mr-2\"></i>Advanced Robotics</li>\n                <li><i className=\"fa-solid fa-check text-purple-500 mr-2\"></i>Portfolio Building</li>\n                <li><i className=\"fa-solid fa-check text-purple-500 mr-2\"></i>Priority Support</li>\n              </ul>\n              <button className=\"w-full bg-purple-500 text-white py-3 rounded-lg font-semibold hover:bg-purple-600 transition\">\n                Go Premium\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-800 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <h3 className=\"text-lg font-bold mb-4\">CodewiseHub</h3>\n              <p className=\"text-gray-400\">Empowering young minds with coding education tailored to their age and skill level.</p>\n            </div>\n            <div>\n              <h4 className=\"text-md font-semibold mb-4\">Courses</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>Little Coders (Ages 6-11)</li>\n                <li>Teen Developers (Ages 12-18)</li>\n                <li>Visual Programming</li>\n                <li>Professional Coding</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-md font-semibold mb-4\">Features</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>Interactive Coding Lab</li>\n                <li>Robotics Playground</li>\n                <li>Age-Appropriate Content</li>\n                <li>Progress Tracking</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-md font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li>Help Center</li>\n                <li>Contact Us</li>\n                <li>Privacy Policy</li>\n                <li>Terms of Service</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 CodewiseHub. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Course Explanation Modal */}\n      <CourseExplanationModal\n        isOpen={showCourseExplanation}\n        onClose={() => setShowCourseExplanation(false)}\n        ageGroup={selectedAgeGroup}\n        onGetStarted={() => onAuthModalOpen('signup', 'student', selectedAgeGroup)}\n      />\n    </div>\n  );\n}\n","size_bytes":17607},"client/src/pages/ParentDashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect, useRef } from \"react\";\n\nexport function ParentDashboard() {\n  const { user } = useAuth();\n  const chartRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    // Initialize progress chart\n    if (chartRef.current && typeof window !== 'undefined') {\n      // This would be initialized with Chart.js in a real implementation\n      const ctx = chartRef.current.getContext('2d');\n      if (ctx) {\n        // Chart.js initialization would go here\n        console.log('Chart initialized');\n      }\n    }\n  }, []);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Dashboard Header */}\n      <div className=\"parent-gradient rounded-2xl p-8 mb-8 text-white\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Parent Dashboard</h1>\n            <p className=\"text-purple-100\">Track {user?.childName || \"your child's\"} coding journey</p>\n          </div>\n          <button className=\"bg-white text-purple-600 px-6 py-3 rounded-full font-bold hover:bg-gray-100 transition\">\n            <i className=\"fa-solid fa-download mr-2\"></i>Progress Report\n          </button>\n        </div>\n      </div>\n\n      {/* Child Progress Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-blue-600 mb-2\">15</div>\n          <div className=\"text-gray-600\">Lessons Completed</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-green-600 mb-2\">7</div>\n          <div className=\"text-gray-600\">Projects Built</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-purple-600 mb-2\">52</div>\n          <div className=\"text-gray-600\">Hours Learned</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-orange-600 mb-2\">Level 4</div>\n          <div className=\"text-gray-600\">Current Level</div>\n        </div>\n      </div>\n\n      {/* Child's Learning Activity */}\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Recent Projects */}\n        <div className=\"dashboard-card\">\n          <h2 className=\"text-xl font-bold mb-4\">Recent Projects</h2>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center p-4 bg-gray-50 rounded-lg\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg flex items-center justify-center text-white mr-4\">\n                <i className=\"fa-solid fa-gamepad\"></i>\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-semibold\">Catch the Star Game</h3>\n                <div className=\"text-sm text-gray-600\">Completed 2 days ago</div>\n              </div>\n              <button className=\"bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition\">\n                View\n              </button>\n            </div>\n            \n            <div className=\"flex items-center p-4 bg-gray-50 rounded-lg\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-green-400 to-blue-500 rounded-lg flex items-center justify-center text-white mr-4\">\n                <i className=\"fa-solid fa-robot\"></i>\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-semibold\">Dancing Robot</h3>\n                <div className=\"text-sm text-gray-600\">Completed 5 days ago</div>\n              </div>\n              <button className=\"bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition\">\n                View\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Learning Progress Chart */}\n        <div className=\"dashboard-card\">\n          <h2 className=\"text-xl font-bold mb-4\">Weekly Progress</h2>\n          <canvas ref={chartRef} width=\"400\" height=\"200\" className=\"w-full h-48\"></canvas>\n        </div>\n      </div>\n\n      {/* Learning Insights */}\n      <div className=\"mt-8\">\n        <div className=\"dashboard-card\">\n          <h2 className=\"text-xl font-bold mb-4\">Learning Insights</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600 mb-2\">85%</div>\n              <div className=\"text-gray-600\">Lesson Completion Rate</div>\n              <div className=\"text-sm text-gray-500 mt-1\">Above average!</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600 mb-2\">12</div>\n              <div className=\"text-gray-600\">Day Learning Streak</div>\n              <div className=\"text-sm text-gray-500 mt-1\">Great consistency!</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600 mb-2\">Logic</div>\n              <div className=\"text-gray-600\">Strongest Skill</div>\n              <div className=\"text-sm text-gray-500 mt-1\">Excellent problem solving!</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5354},"client/src/pages/StudentDashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useState } from \"react\";\nimport { courseData, roboticsActivities } from \"@/data/courseData\";\nimport { AITutorModal } from \"@/components/AITutorModal\";\nimport { VideoConferenceModal } from \"@/components/VideoConferenceModal\";\nimport { MicrobitDeviceConnector } from \"@/components/MicrobitDeviceConnector\";\nimport { RoboticsLabModal } from \"@/components/RoboticsLabModal\";\nimport { StudentLearningMaterials } from \"@/components/StudentLearningMaterials\";\n\ninterface StudentDashboardProps {\n  onCodingLabOpen: () => void;\n}\n\ninterface ChatMessage {\n  type: 'user' | 'ai';\n  message: string;\n}\n\nexport function StudentDashboard({ onCodingLabOpen }: StudentDashboardProps) {\n  const { user } = useAuth();\n  const [aiChatInput, setAiChatInput] = useState('');\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([\n    {\n      type: 'ai',\n      message: \"Hi! I'm your AI coding assistant. Ask me about programming concepts, debugging help, or project ideas!\"\n    }\n  ]);\n\n  // Advanced feature modals\n  const [showAITutor, setShowAITutor] = useState(false);\n  const [showVideoCall, setShowVideoCall] = useState(false);\n  const [showDeviceConnector, setShowDeviceConnector] = useState(false);\n  const [showRoboticsLab, setShowRoboticsLab] = useState(false);\n  const [selectedRoboticsActivity, setSelectedRoboticsActivity] = useState<any>(null);\n\n  const isLittleCoder = user?.ageGroup === '6-11';\n\n  const sendAIMessage = () => {\n    if (!aiChatInput.trim()) return;\n\n    // Add user message\n    const userMessage: ChatMessage = { type: 'user', message: aiChatInput };\n    setChatMessages(prev => [...prev, userMessage]);\n\n    // Generate AI response\n    const aiResponse = generateAIResponse(aiChatInput, isLittleCoder);\n    const aiMessage: ChatMessage = { type: 'ai', message: aiResponse };\n\n    // Add AI response after a short delay\n    setTimeout(() => {\n      setChatMessages(prev => [...prev, aiMessage]);\n    }, 1000);\n\n    setAiChatInput('');\n  };\n\n  const generateAIResponse = (message: string, isLittleCoder: boolean): string => {\n    const lowercaseMessage = message.toLowerCase();\n    \n    const responses = isLittleCoder ? {\n      'help': \"I'm here to help! What would you like to learn about coding today? 🌟\",\n      'loop': \"A loop is like doing something over and over! Like brushing your teeth every morning. In coding, we use loops to repeat actions! 🔄\",\n      'variable': \"A variable is like a box where you store things! You can put numbers, words, or other stuff in it and use it later! 📦\",\n      'function': \"A function is like a magic spell! You give it a name and it does something special when you call it! ✨\",\n      'debug': \"Debugging is like being a detective! When your code doesn't work, we look for clues to fix it! 🔍\",\n      'project': \"Let's build something cool! How about making a dancing robot or a color-changing rainbow? 🌈\",\n      'scratch': \"Scratch is super fun! You drag colorful blocks to make your characters move and dance! Want to try it? 🎨\",\n      'default': \"That's a great question! Coding is like solving puzzles with blocks. What would you like to create today? 🧩\"\n    } : {\n      'help': \"I'm your AI coding mentor! I can help with programming concepts, debugging, project ideas, and code reviews. What do you need help with?\",\n      'loop': \"Loops are fundamental control structures that repeat code blocks. Common types include for loops, while loops, and do-while loops. They help avoid code duplication and process collections efficiently.\",\n      'variable': \"Variables are named containers that store data values. They have types (string, number, boolean, etc.) and scope (global, local). Good naming conventions make code more readable.\",\n      'function': \"Functions are reusable blocks of code that perform specific tasks. They can take parameters, return values, and help organize code into modular, maintainable pieces.\",\n      'debug': \"Debugging involves identifying and fixing code errors. Use console.log() for JavaScript, print() for Python, or your IDE's debugger. Check for syntax errors, logic errors, and runtime exceptions.\",\n      'javascript': \"JavaScript is a versatile programming language for web development. It handles DOM manipulation, event handling, and can run on both client and server-side with Node.js.\",\n      'python': \"Python is excellent for beginners and powerful for advanced projects. It's used in web development, data science, AI/ML, and automation. The syntax is clean and readable.\",\n      'project': \"Great project ideas: Build a to-do app, create a simple game, develop a weather app using APIs, or try machine learning with TensorFlow.js or Python. What interests you most?\",\n      'default': \"I'm here to help with any programming questions! Whether it's syntax, algorithms, best practices, or project guidance, feel free to ask.\"\n    };\n    \n    // Find matching response\n    for (const [key, response] of Object.entries(responses)) {\n      if (lowercaseMessage.includes(key)) {\n        return response;\n      }\n    }\n    \n    return responses.default;\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      sendAIMessage();\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Dashboard Header */}\n      <div className=\"student-gradient rounded-2xl p-8 mb-8 text-white\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Welcome back, {user?.name}!</h1>\n            <p className=\"text-pink-100\">Ready for another coding adventure?</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <button \n              onClick={onCodingLabOpen}\n              className=\"bg-white text-pink-600 px-4 py-2 rounded-full font-bold hover:bg-gray-100 transition\"\n            >\n              <i className=\"fa-solid fa-laptop-code mr-2\"></i>Lab\n            </button>\n            <button \n              onClick={() => setShowAITutor(true)}\n              className=\"bg-white bg-opacity-20 text-white px-4 py-2 rounded-full font-bold hover:bg-opacity-30 transition\"\n            >\n              <i className=\"fa-solid fa-robot mr-2\"></i>AI Tutor\n            </button>\n            {user?.ageGroup === '12-17' && (\n              <button \n                onClick={() => setShowVideoCall(true)}\n                className=\"bg-white bg-opacity-20 text-white px-4 py-2 rounded-full font-bold hover:bg-opacity-30 transition\"\n              >\n                <i className=\"fa-solid fa-video mr-2\"></i>Video\n              </button>\n            )}\n            <button \n              onClick={() => setShowDeviceConnector(true)}\n              className=\"bg-white bg-opacity-20 text-white px-4 py-2 rounded-full font-bold hover:bg-opacity-30 transition\"\n            >\n              <i className=\"fa-solid fa-microchip mr-2\"></i>Device\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-blue-600 mb-2\">12</div>\n          <div className=\"text-gray-600\">Lessons Completed</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-green-600 mb-2\">5</div>\n          <div className=\"text-gray-600\">Projects Built</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-purple-600 mb-2\">8</div>\n          <div className=\"text-gray-600\">Badges Earned</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-orange-600 mb-2\">45</div>\n          <div className=\"text-gray-600\">Hours Coded</div>\n        </div>\n      </div>\n\n      {/* Student Learning Materials */}\n      <div className=\"mb-8\">\n        <StudentLearningMaterials ageGroup={user?.ageGroup || '6-11'} />\n      </div>\n\n      {/* Robotics Activities for Little Coders */}\n      {isLittleCoder && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-2xl font-bold mb-6\">🤖 Robotics Fun Zone</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {roboticsActivities[\"6-11\"].map((activity) => (\n              <div \n                key={activity.id} \n                onClick={() => {\n                  setSelectedRoboticsActivity(activity);\n                  setShowRoboticsLab(true);\n                }}\n                className=\"dashboard-card hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer\"\n              >\n                <div className=\"aspect-square bg-gradient-to-br from-green-100 to-yellow-100 rounded-lg mb-4 flex items-center justify-center\">\n                  <div className=\"text-3xl\">\n                    {activity.type === 'maze' ? '🏃' : activity.type === 'puzzle' ? '🧩' : activity.type === 'challenge' ? '🌟' : '🎨'}\n                  </div>\n                </div>\n                <h3 className=\"font-bold mb-2\">{activity.title}</h3>\n                <p className=\"text-gray-600 text-sm mb-3\">{activity.description}</p>\n                <div className=\"flex justify-between items-center mb-3\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    activity.difficulty === 'easy' ? 'bg-green-100 text-green-800' :\n                    activity.difficulty === 'medium' ? 'bg-yellow-100 text-yellow-800' : \n                    'bg-red-100 text-red-800'\n                  }`}>\n                    {activity.difficulty}\n                  </span>\n                  <span className=\"text-gray-500 text-xs\">⚡ {activity.points} pts</span>\n                </div>\n                <button className=\"w-full bg-green-500 text-white py-2 rounded-lg hover:bg-green-600 transition\">\n                  Open Robotics Lab\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Learning Content */}\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Continue Learning */}\n        <div className=\"lg:col-span-2\">\n          <div className=\"dashboard-card\">\n            <h2 className=\"text-xl font-bold mb-4\">Continue Learning</h2>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center p-4 bg-gray-50 rounded-lg\">\n                <div className=\"w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center text-white mr-4\">\n                  <i className=\"fa-solid fa-puzzle-piece\"></i>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold\">Block Coding Basics</h3>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div className=\"bg-blue-500 h-2 rounded-full\" style={{ width: '75%' }}></div>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mt-1\">3 of 4 lessons complete</div>\n                </div>\n                <button className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition\">\n                  Continue\n                </button>\n              </div>\n              \n              {/* Age-specific content */}\n              {isLittleCoder && (\n                <>\n                  <div className=\"flex items-center p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"w-12 h-12 bg-green-500 rounded-lg flex items-center justify-center text-white mr-4\">\n                      <i className=\"fa-solid fa-robot\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold\">Robot Adventures</h3>\n                      <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                        <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '30%' }}></div>\n                      </div>\n                      <div className=\"text-sm text-gray-600 mt-1\">1 of 5 lessons complete</div>\n                    </div>\n                    <button className=\"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition\">\n                      Start\n                    </button>\n                  </div>\n                  \n                  <div className=\"flex items-center p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center text-white mr-4\">\n                      <i className=\"fa-solid fa-microchip\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold\">Micro:bit Magic</h3>\n                      <div className=\"text-sm text-gray-600\">Create LED patterns and games</div>\n                    </div>\n                    <button className=\"bg-purple-500 text-white px-4 py-2 rounded-lg hover:bg-purple-600 transition\">\n                      Explore\n                    </button>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Achievements & Progress */}\n        <div className=\"space-y-6\">\n          {/* AI Coding Assistant */}\n          <div className=\"dashboard-card\">\n            <h3 className=\"text-lg font-bold mb-4\">\n              <i className=\"fa-solid fa-robot text-blue-500 mr-2\"></i>AI Study Helper\n            </h3>\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-4 h-48 overflow-y-auto\">\n              {chatMessages.map((msg, index) => (\n                <div key={index} className={`flex items-start mb-3 ${msg.type === 'user' ? 'justify-end' : ''}`}>\n                  {msg.type === 'ai' && (\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs mr-3\">\n                      <i className=\"fa-solid fa-robot\"></i>\n                    </div>\n                  )}\n                  <div className={`rounded-lg p-2 max-w-xs ${\n                    msg.type === 'user' ? 'bg-green-100' : 'bg-blue-100'\n                  }`}>\n                    <p className=\"text-sm\">{msg.message}</p>\n                  </div>\n                  {msg.type === 'user' && (\n                    <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-xs ml-3\">\n                      <i className=\"fa-solid fa-user\"></i>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"flex gap-2\">\n              <input \n                type=\"text\" \n                value={aiChatInput}\n                onChange={(e) => setAiChatInput(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Ask me about coding...\" \n                className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n              />\n              <button \n                onClick={sendAIMessage}\n                className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition\"\n              >\n                <i className=\"fa-solid fa-paper-plane\"></i>\n              </button>\n            </div>\n          </div>\n\n          {/* Progress Overview */}\n          <div className=\"dashboard-card\">\n            <h3 className=\"text-lg font-bold mb-4\">Overall Progress</h3>\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"relative w-20 h-20\">\n                <svg className=\"w-full h-full progress-ring\">\n                  <circle cx=\"40\" cy=\"40\" r=\"32\" stroke=\"#e5e7eb\" strokeWidth=\"6\" fill=\"none\" />\n                  <circle \n                    cx=\"40\" \n                    cy=\"40\" \n                    r=\"32\" \n                    stroke=\"#10b981\" \n                    strokeWidth=\"6\" \n                    fill=\"none\" \n                    className=\"progress-ring-circle\" \n                    style={{ strokeDashoffset: '125.6' }}\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-sm font-bold text-gray-800\">50%</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-gray-600\">Level 5 Coder</p>\n              <p className=\"text-sm text-gray-500\">250 XP to next level</p>\n            </div>\n          </div>\n\n          {/* Recent Achievements */}\n          <div className=\"dashboard-card\">\n            <h3 className=\"text-lg font-bold mb-4\">Latest Badges</h3>\n            <div className=\"space-y-3\">\n              <div className=\"achievement-badge earned\">🎯 First Project</div>\n              <div className=\"achievement-badge earned\">🔥 7-Day Streak</div>\n              <div className=\"achievement-badge earned\">🎨 Creative Coder</div>\n              <div className=\"achievement-badge\">🚀 Speed Builder</div>\n              <div className=\"achievement-badge\">🧠 Logic Master</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Advanced Feature Modals */}\n      <AITutorModal isOpen={showAITutor} onClose={() => setShowAITutor(false)} />\n      <VideoConferenceModal isOpen={showVideoCall} onClose={() => setShowVideoCall(false)} />\n      <MicrobitDeviceConnector \n        isOpen={showDeviceConnector} \n        onClose={() => setShowDeviceConnector(false)}\n        onDeviceConnected={(device) => console.log('Device connected:', device)}\n      />\n      <RoboticsLabModal \n        isOpen={showRoboticsLab} \n        onClose={() => setShowRoboticsLab(false)}\n        activity={selectedRoboticsActivity}\n      />\n    </div>\n  );\n}\n","size_bytes":17955},"client/src/pages/TeacherDashboard.tsx":{"content":"import { useState } from 'react';\nimport { teacherCourseTemplates } from '@/data/courseData';\nimport { VideoConferenceModal } from '@/components/VideoConferenceModal';\nimport { AITutorModal } from '@/components/AITutorModal';\n\nexport function TeacherDashboard() {\n  const [showCourseCreator, setShowCourseCreator] = useState(false);\n  const [selectedTemplate, setSelectedTemplate] = useState<any>(null);\n  const [showVideoCall, setShowVideoCall] = useState(false);\n  const [showAITutor, setShowAITutor] = useState(false);\n  const [newCourse, setNewCourse] = useState({\n    title: '',\n    description: '',\n    ageGroup: '6-11' as '6-11' | '12-17',\n    difficulty: 'beginner' as 'beginner' | 'intermediate' | 'advanced',\n    category: 'programming' as 'programming' | 'robotics' | 'web-development' | 'game-development',\n    estimatedHours: 10\n  });\n\n  const openAICourseGenerator = () => {\n    setShowCourseCreator(true);\n  };\n\n  const createCourseFromTemplate = (template: any) => {\n    setSelectedTemplate(template);\n    setNewCourse({\n      ...newCourse,\n      title: template.title.replace(' Template', ''),\n      description: template.description,\n      ageGroup: template.ageGroup === 'both' ? '6-11' : template.ageGroup\n    });\n    setShowCourseCreator(true);\n  };\n\n  const saveCourse = () => {\n    // TODO: Save course to database\n    alert(`Course \"${newCourse.title}\" created successfully!`);\n    setShowCourseCreator(false);\n    setSelectedTemplate(null);\n    setNewCourse({\n      title: '',\n      description: '',\n      ageGroup: '6-11',\n      difficulty: 'beginner',\n      category: 'programming',\n      estimatedHours: 10\n    });\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Dashboard Header */}\n      <div className=\"teacher-gradient rounded-2xl p-8 mb-8 text-gray-800\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Teacher Dashboard</h1>\n            <p className=\"text-gray-700\">Manage your students and create amazing courses</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <button \n              onClick={openAICourseGenerator}\n              className=\"bg-white text-teal-600 px-4 py-2 rounded-full font-bold hover:bg-gray-100 transition\"\n            >\n              <i className=\"fa-solid fa-magic mr-2\"></i>AI Generator\n            </button>\n            <button \n              onClick={() => setShowVideoCall(true)}\n              className=\"bg-white bg-opacity-20 text-white px-4 py-2 rounded-full font-bold hover:bg-opacity-30 transition\"\n            >\n              <i className=\"fa-solid fa-video mr-2\"></i>Start Session\n            </button>\n            <button \n              onClick={() => setShowAITutor(true)}\n              className=\"bg-white bg-opacity-20 text-white px-4 py-2 rounded-full font-bold hover:bg-opacity-30 transition\"\n            >\n              <i className=\"fa-solid fa-robot mr-2\"></i>AI Assistant\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-blue-600 mb-2\">24</div>\n          <div className=\"text-gray-600\">Active Students</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-green-600 mb-2\">8</div>\n          <div className=\"text-gray-600\">Courses Created</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-purple-600 mb-2\">156</div>\n          <div className=\"text-gray-600\">Assignments Graded</div>\n        </div>\n        <div className=\"dashboard-card text-center\">\n          <div className=\"text-3xl font-bold text-orange-600 mb-2\">95%</div>\n          <div className=\"text-gray-600\">Avg Completion</div>\n        </div>\n      </div>\n\n      {/* Course Templates */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold mb-6\">📚 Course Creation Templates</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {teacherCourseTemplates.map((template) => (\n            <div key={template.id} className=\"dashboard-card hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n              <div className=\"aspect-video bg-gradient-to-br from-teal-100 to-blue-100 rounded-lg mb-4 flex items-center justify-center\">\n                <div className=\"text-4xl\">\n                  {template.id.includes('programming') ? '💻' : \n                   template.id.includes('robotics') ? '🤖' : \n                   template.id.includes('web') ? '🌐' : '🎮'}\n                </div>\n              </div>\n              <h3 className=\"font-bold text-lg mb-2\">{template.title}</h3>\n              <p className=\"text-gray-600 text-sm mb-4\">{template.description}</p>\n              <div className=\"mb-4\">\n                <div className=\"text-sm text-gray-500 mb-2\">Template includes:</div>\n                <ul className=\"text-xs text-gray-600 space-y-1\">\n                  {template.sections.slice(0, 3).map((section, idx) => (\n                    <li key={idx} className=\"flex items-center\">\n                      <div className=\"w-1.5 h-1.5 bg-teal-500 rounded-full mr-2\"></div>\n                      {section.name} ({section.estimatedHours}h)\n                    </li>\n                  ))}\n                  {template.sections.length > 3 && (\n                    <li className=\"text-gray-400\">...and {template.sections.length - 3} more</li>\n                  )}\n                </ul>\n              </div>\n              <button \n                onClick={() => createCourseFromTemplate(template)}\n                className=\"w-full bg-teal-500 text-white py-2 rounded-lg hover:bg-teal-600 transition\"\n              >\n                Use Template\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Teacher Tools */}\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Student Management */}\n        <div className=\"dashboard-card\">\n          <h2 className=\"text-xl font-bold mb-4\">Student Management</h2>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-bold mr-3\">\n                  A\n                </div>\n                <div>\n                  <div className=\"font-semibold\">Alice Johnson</div>\n                  <div className=\"text-sm text-gray-600\">Level 3 • 85% Progress</div>\n                </div>\n              </div>\n              <div className=\"text-green-600\">\n                <i className=\"fa-solid fa-check-circle\"></i>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm font-bold mr-3\">\n                  B\n                </div>\n                <div>\n                  <div className=\"font-semibold\">Bob Smith</div>\n                  <div className=\"text-sm text-gray-600\">Level 2 • 65% Progress</div>\n                </div>\n              </div>\n              <div className=\"text-yellow-600\">\n                <i className=\"fa-solid fa-clock\"></i>\n              </div>\n            </div>\n            \n            <button className=\"w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition\">\n              View All Students\n            </button>\n          </div>\n        </div>\n\n        {/* Course Management */}\n        <div className=\"dashboard-card\">\n          <h2 className=\"text-xl font-bold mb-4\">Course Management</h2>\n          <div className=\"space-y-3\">\n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <div className=\"font-semibold\">Introduction to Scratch</div>\n              <div className=\"text-sm text-gray-600 mb-2\">12 students enrolled</div>\n              <div className=\"flex space-x-2\">\n                <button className=\"bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition\">Edit</button>\n                <button className=\"bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition\">View</button>\n              </div>\n            </div>\n            \n            <div className=\"p-3 bg-gray-50 rounded-lg\">\n              <div className=\"font-semibold\">Python Basics</div>\n              <div className=\"text-sm text-gray-600 mb-2\">8 students enrolled</div>\n              <div className=\"flex space-x-2\">\n                <button className=\"bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 transition\">Edit</button>\n                <button className=\"bg-blue-500 text-white px-3 py-1 rounded text-sm hover:bg-blue-600 transition\">View</button>\n              </div>\n            </div>\n            \n            <button className=\"w-full bg-teal-500 text-white py-2 rounded-lg hover:bg-teal-600 transition\">\n              Create New Course\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Course Creation Modal */}\n      {showCourseCreator && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n          <div className=\"bg-white rounded-2xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n            <div className=\"flex justify-between items-center p-6 border-b\">\n              <h2 className=\"text-2xl font-bold\">\n                {selectedTemplate ? `Create Course from Template` : 'AI Course Generator'}\n              </h2>\n              <button \n                onClick={() => setShowCourseCreator(false)}\n                className=\"text-gray-500 hover:text-gray-700\"\n              >\n                <i className=\"fa-solid fa-times text-2xl\"></i>\n              </button>\n            </div>\n\n            <div className=\"p-6\">\n              {selectedTemplate && (\n                <div className=\"mb-6 p-4 bg-teal-50 rounded-lg border border-teal-200\">\n                  <h3 className=\"font-bold text-teal-800 mb-2\">Using Template: {selectedTemplate.title}</h3>\n                  <p className=\"text-teal-700 text-sm\">{selectedTemplate.description}</p>\n                </div>\n              )}\n\n              <form className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Course Title</label>\n                  <input\n                    type=\"text\"\n                    value={newCourse.title}\n                    onChange={(e) => setNewCourse({ ...newCourse, title: e.target.value })}\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\n                    placeholder=\"Enter course title...\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Description</label>\n                  <textarea\n                    value={newCourse.description}\n                    onChange={(e) => setNewCourse({ ...newCourse, description: e.target.value })}\n                    rows={3}\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\n                    placeholder=\"Describe what students will learn...\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Age Group</label>\n                    <select\n                      value={newCourse.ageGroup}\n                      onChange={(e) => setNewCourse({ ...newCourse, ageGroup: e.target.value as '6-11' | '12-17' })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\n                    >\n                      <option value=\"6-11\">Little Coders (6-11)</option>\n                      <option value=\"12-17\">Teen Coders (12-17)</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Difficulty</label>\n                    <select\n                      value={newCourse.difficulty}\n                      onChange={(e) => setNewCourse({ ...newCourse, difficulty: e.target.value as any })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\n                    >\n                      <option value=\"beginner\">Beginner</option>\n                      <option value=\"intermediate\">Intermediate</option>\n                      <option value=\"advanced\">Advanced</option>\n                    </select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Category</label>\n                    <select\n                      value={newCourse.category}\n                      onChange={(e) => setNewCourse({ ...newCourse, category: e.target.value as any })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\n                    >\n                      <option value=\"programming\">Programming</option>\n                      <option value=\"robotics\">Robotics</option>\n                      <option value=\"web-development\">Web Development</option>\n                      <option value=\"game-development\">Game Development</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Estimated Hours</label>\n                    <input\n                      type=\"number\"\n                      value={newCourse.estimatedHours}\n                      onChange={(e) => setNewCourse({ ...newCourse, estimatedHours: parseInt(e.target.value) || 10 })}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent\"\n                      min=\"1\"\n                      max=\"100\"\n                    />\n                  </div>\n                </div>\n\n                {selectedTemplate && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Template Sections</label>\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      {selectedTemplate.sections.map((section: any, idx: number) => (\n                        <div key={idx} className=\"flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0\">\n                          <span className=\"text-sm\">{section.name}</span>\n                          <span className=\"text-xs text-gray-500\">{section.estimatedHours}h</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex space-x-3 pt-4\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowCourseCreator(false)}\n                    className=\"flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={saveCourse}\n                    className=\"flex-1 bg-teal-500 text-white py-2 rounded-lg hover:bg-teal-600 transition\"\n                  >\n                    Create Course\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Advanced Feature Modals */}\n      <VideoConferenceModal isOpen={showVideoCall} onClose={() => setShowVideoCall(false)} />\n      <AITutorModal isOpen={showAITutor} onClose={() => setShowAITutor(false)} />\n    </div>\n  );\n}\n","size_bytes":16598},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/user.ts":{"content":"export type UserRole = 'student' | 'teacher' | 'parent' | 'school_admin';\nexport type AgeGroup = '6-11' | '12-17';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: UserRole;\n  ageGroup?: AgeGroup;\n  childName?: string;\n  schoolId?: string;\n  schoolName?: string;\n}\n\nexport interface UserProgress {\n  lessonsCompleted: number;\n  projectsCompleted: number;\n  totalScore: number;\n  level: number;\n}\n\nexport interface Achievement {\n  id: string;\n  badgeType: string;\n  title: string;\n  description: string;\n  earnedAt: string;\n}\n","size_bytes":560},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DEPLOYMENT.md":{"content":"# Vercel Deployment Guide for CodewiseHub\n\n## Prerequisites\n\n1. **Vercel Account**: Sign up at [vercel.com](https://vercel.com)\n2. **GitHub Repository**: Your code should be pushed to GitHub\n3. **Environment Variables**: You'll need your Firebase and Database credentials\n\n## Step 1: Prepare Your Code\n\n### 1.1 Update package.json Scripts\nAdd this script to your `package.json` (manually):\n```json\n{\n  \"scripts\": {\n    \"vercel-build\": \"npm run build\"\n  }\n}\n```\n\n### 1.2 Files Already Created\nI've created the following files for Vercel deployment:\n- `vercel.json` - Vercel configuration\n- `.vercelignore` - Files to ignore during deployment\n- `api/index.ts` - Serverless API endpoint\n```\n\n### 1.3 Environment Variables Needed\nSet these in Vercel dashboard:\n```\nDATABASE_URL=your_neon_database_url\nVITE_FIREBASE_API_KEY=your_firebase_api_key\nVITE_FIREBASE_PROJECT_ID=your_firebase_project_id\nVITE_FIREBASE_APP_ID=your_firebase_app_id\nANTHROPIC_API_KEY=your_anthropic_api_key (optional, for AI features)\n```\n\n## Step 2: Deploy to Vercel\n\n### Option A: Deploy via Vercel Dashboard\n1. Go to [vercel.com/dashboard](https://vercel.com/dashboard)\n2. Click \"New Project\"\n3. Connect your GitHub repository\n4. Select your CodewiseHub repository\n5. Configure build settings:\n   - **Framework Preset**: Other\n   - **Build Command**: `npm run vercel-build`\n   - **Output Directory**: `dist/public`\n   - **Install Command**: `npm install`\n\n### Option B: Deploy via Vercel CLI\n```bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Login to Vercel\nvercel login\n\n# Deploy from your project directory\nvercel\n\n# Follow the prompts:\n# Set up and deploy? Yes\n# Which scope? (select your account)\n# Link to existing project? No\n# Project name: codewise-hub\n# In which directory is your code? ./\n# Want to override settings? Yes\n# Build Command: npm run vercel-build\n# Output Directory: dist/public\n# Development Command: npm run dev\n```\n\n## Step 3: Configure Environment Variables\n\n### In Vercel Dashboard:\n1. Go to your project dashboard\n2. Click on \"Settings\" tab\n3. Click on \"Environment Variables\"\n4. Add each variable:\n\n**Database Configuration:**\n```\nDATABASE_URL: your_postgresql_connection_string\n```\n\n**Firebase Configuration:**\n```\nVITE_FIREBASE_API_KEY: your_api_key\nVITE_FIREBASE_PROJECT_ID: your_project_id\nVITE_FIREBASE_APP_ID: your_app_id\n```\n\n**Optional AI Features:**\n```\nANTHROPIC_API_KEY: your_anthropic_key\n```\n\n## Step 4: Database Setup\n\n### Option A: Neon Database (Recommended)\n1. Go to [neon.tech](https://neon.tech)\n2. Create a new project\n3. Copy the connection string\n4. Add it as `DATABASE_URL` in Vercel\n\n### Option B: Vercel Postgres\n1. In your Vercel project dashboard\n2. Go to \"Storage\" tab\n3. Create a new Postgres database\n4. The `DATABASE_URL` will be automatically added\n\n## Step 5: Firebase Configuration\n\n1. Go to [Firebase Console](https://console.firebase.google.com)\n2. Create a new project or use existing\n3. Enable Authentication with Google provider\n4. Add your Vercel domain to authorized domains:\n   - `your-app-name.vercel.app`\n5. Get configuration values from Project Settings\n\n## Step 6: Custom Domain (Optional)\n\n1. In Vercel dashboard, go to \"Domains\" tab\n2. Add your custom domain\n3. Follow DNS configuration instructions\n4. Update Firebase authorized domains\n\n## Troubleshooting\n\n### Build Errors\n- Ensure all dependencies are in `dependencies`, not `devDependencies`\n- Check that TypeScript compiles without errors\n- Verify all environment variables are set\n\n### Runtime Errors\n- Check Vercel Function logs in the dashboard\n- Ensure database connection is working\n- Verify Firebase configuration\n\n### Performance Optimization\n- Enable Vercel Analytics\n- Use Vercel Speed Insights\n- Monitor function execution times\n\n## Project Structure for Vercel\n\n```\nyour-project/\n├── vercel.json          # Vercel configuration\n├── .vercelignore       # Files to ignore during deployment\n├── server/             # Backend API routes\n│   └── index.ts       # Main server file\n├── client/            # Frontend React app\n│   └── src/\n├── shared/            # Shared types and schemas\n├── dist/              # Build output\n│   └── public/        # Static files\n└── package.json       # Dependencies and scripts\n```\n\n## Success Checklist\n\n- [ ] Code pushed to GitHub\n- [ ] Vercel project created and connected\n- [ ] Environment variables configured\n- [ ] Database connected and accessible\n- [ ] Firebase authentication working\n- [ ] Build completes successfully\n- [ ] App loads and functions correctly\n- [ ] Custom domain configured (if needed)\n\nYour CodewiseHub platform will be live at: `https://your-project-name.vercel.app`","size_bytes":4702},"README.md":{"content":"# CodewiseHub Learning Platform\n\nA comprehensive multi-role educational platform for coding education.\n\n## Features\n- Multi-role authentication (Student, Teacher, Parent)\n- Age-appropriate content delivery\n- Interactive coding labs with micro:bit simulator\n- AI tutoring system\n- Video conferencing capabilities\n- Robotics visual lab\n\n## Deployment\nReady for Vercel deployment with PostgreSQL database support.\n","size_bytes":411},"api/index.ts":{"content":"import { VercelRequest, VercelResponse } from '@vercel/node';\nimport express from 'express';\nimport cookieParser from 'cookie-parser';\nimport { registerRoutes } from '../server/routes';\n\nconst app = express();\n\n// Middleware\napp.use(express.json());\napp.use(cookieParser());\n\n// CORS for Vercel\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  res.header('Access-Control-Allow-Credentials', 'true');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\n// Register all API routes\nregisterRoutes(app);\n\n// Export for Vercel\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  return app(req, res);\n}","size_bytes":895},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":485},"client/src/components/AITutorModal.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface AITutorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  codeSnippet?: string;\n  suggestion?: {\n    type: 'fix' | 'optimize' | 'explain';\n    title: string;\n    description: string;\n    code?: string;\n  };\n}\n\ninterface LearningContext {\n  currentTopic?: string;\n  strugglingWith?: string[];\n  strengths?: string[];\n  lastCode?: string;\n  difficulty?: 'beginner' | 'intermediate' | 'advanced';\n}\n\nexport function AITutorModal({ isOpen, onClose }: AITutorModalProps) {\n  const { user } = useAuth();\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [learningContext, setLearningContext] = useState<LearningContext>({});\n  const [tutorMode, setTutorMode] = useState<'chat' | 'code-review' | 'practice'>('chat');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const isLittleCoder = user?.ageGroup === '6-11';\n\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      initializeTutor();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const initializeTutor = () => {\n    const welcomeMessage: ChatMessage = {\n      id: Date.now().toString(),\n      role: 'assistant',\n      content: isLittleCoder \n        ? \"Hi there! 🌟 I'm your AI coding buddy! I'm here to help you learn programming in a fun way. What would you like to explore today? You can ask me about coding concepts, show me your code, or let's practice together!\"\n        : \"Hello! I'm your AI programming tutor. I'm here to provide personalized coding guidance, review your code, explain complex concepts, and help you overcome programming challenges. What would you like to work on today?\",\n      timestamp: new Date()\n    };\n    setMessages([welcomeMessage]);\n  };\n\n  const generateAIResponse = async (userMessage: string): Promise<ChatMessage> => {\n    // Simulate AI processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n\n    const lowercaseMessage = userMessage.toLowerCase();\n    \n    // Advanced tutoring responses based on context\n    let response = '';\n    let suggestion = undefined;\n\n    if (lowercaseMessage.includes('error') || lowercaseMessage.includes('bug') || lowercaseMessage.includes('not working')) {\n      response = isLittleCoder \n        ? \"Oh no! Don't worry, every coder gets bugs - they're like puzzles to solve! 🐛 Can you show me your code? I'll help you find what's wrong and fix it together!\"\n        : \"I'd be happy to help debug your code. Please share the error message and your code snippet. I'll analyze it and provide specific solutions along with explanations of what went wrong.\";\n      \n      suggestion = {\n        type: 'fix' as const,\n        title: 'Debug Together',\n        description: 'Share your code and I\\'ll help identify and fix the issue',\n        code: '// Paste your code here and I\\'ll help debug it'\n      };\n    } else if (lowercaseMessage.includes('loop') || lowercaseMessage.includes('repeat')) {\n      response = isLittleCoder\n        ? \"Loops are super cool! 🔄 They're like telling the computer 'do this again and again!' Think of it like brushing your teeth every morning - you repeat the same steps. Want to see some fun loop examples?\"\n        : \"Loops are fundamental control structures that allow you to execute code repeatedly. Let me explain the different types of loops and when to use each one. Would you like to see practical examples?\";\n      \n      suggestion = {\n        type: 'explain' as const,\n        title: 'Loop Practice',\n        description: 'Try this interactive loop exercise',\n        code: isLittleCoder \n          ? 'for i in range(5):\\n    print(\"Hello!\", i)'\n          : 'for (let i = 0; i < 10; i++) {\\n    console.log(`Count: ${i}`);\\n}'\n      };\n    } else if (lowercaseMessage.includes('function') || lowercaseMessage.includes('method')) {\n      response = isLittleCoder\n        ? \"Functions are like magic spells! ✨ You give them a name, and when you say the name, they do something special. It's like having a robot helper that knows exactly what to do!\"\n        : \"Functions are reusable blocks of code that perform specific tasks. They help organize your code, reduce repetition, and make programs more maintainable. Let me show you how to create effective functions.\";\n      \n      suggestion = {\n        type: 'explain' as const,\n        title: 'Function Workshop',\n        description: 'Learn to create and use functions effectively',\n        code: isLittleCoder\n          ? 'def say_hello(name):\\n    print(f\"Hello, {name}!\")\\n\\nsay_hello(\"Friend\")'\n          : 'function calculateArea(length, width) {\\n    return length * width;\\n}\\n\\nconst area = calculateArea(5, 3);'\n      };\n    } else if (lowercaseMessage.includes('variable') || lowercaseMessage.includes('store')) {\n      response = isLittleCoder\n        ? \"Variables are like magical boxes! 📦 You can put numbers, words, or anything inside them and use them later. Each box has a name so you remember what's inside!\"\n        : \"Variables are containers that store data values. Understanding variable scope, types, and naming conventions is crucial for writing clean, maintainable code. Let me explain the best practices.\";\n    } else if (lowercaseMessage.includes('array') || lowercaseMessage.includes('list')) {\n      response = isLittleCoder\n        ? \"Arrays are like toy boxes with numbered spots! 🧸 You can put lots of things in order and find them by their number. Want to see how to make your own toy box?\"\n        : \"Arrays are data structures that store multiple elements in a single variable. They're essential for handling collections of data efficiently. Let me show you array methods and best practices.\";\n    } else if (lowercaseMessage.includes('help') || lowercaseMessage.includes('stuck')) {\n      response = isLittleCoder\n        ? \"Don't worry! Getting stuck is part of learning - even the best coders get stuck sometimes! 🤗 Tell me what you're working on and I'll help you figure it out step by step!\"\n        : \"I'm here to help! Getting stuck is a normal part of programming. Can you describe the specific challenge you're facing? I'll provide targeted guidance and break it down into manageable steps.\";\n    } else {\n      response = isLittleCoder\n        ? \"That's a great question! 🌟 I love helping curious coders like you! Can you tell me more about what you're trying to do? The more you tell me, the better I can help!\"\n        : \"I'd be happy to help with that! Could you provide more context about your specific programming challenge or learning goal? This will help me give you the most relevant and useful guidance.\";\n    }\n\n    return {\n      id: Date.now().toString(),\n      role: 'assistant',\n      content: response,\n      timestamp: new Date(),\n      suggestion\n    };\n  };\n\n  const handleSendMessage = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: input,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n\n    try {\n      const aiResponse = await generateAIResponse(input);\n      setMessages(prev => [...prev, aiResponse]);\n      \n      // Update learning context based on conversation\n      setLearningContext(prev => ({\n        ...prev,\n        currentTopic: extractTopic(input),\n        lastCode: extractCode(input)\n      }));\n    } catch (error) {\n      const errorMessage: ChatMessage = {\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: \"I'm having trouble right now. Please try again in a moment!\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const extractTopic = (message: string): string => {\n    const topics = ['loops', 'functions', 'variables', 'arrays', 'objects', 'classes'];\n    return topics.find(topic => message.toLowerCase().includes(topic)) || 'general';\n  };\n\n  const extractCode = (message: string): string | undefined => {\n    const codePattern = /```[\\s\\S]*?```|`[^`]+`/;\n    const match = message.match(codePattern);\n    return match ? match[0] : undefined;\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const switchMode = (mode: 'chat' | 'code-review' | 'practice') => {\n    setTutorMode(mode);\n    const modeMessages = {\n      'code-review': \"Great! I'm ready to review your code. Paste your code below and I'll provide detailed feedback, suggestions for improvement, and explain any issues I find.\",\n      'practice': \"Perfect! Let's practice together. I'll give you coding challenges that match your skill level. What topic would you like to practice? Loops, functions, arrays, or something else?\",\n      'chat': \"I'm here to chat and answer any programming questions you have! What would you like to learn about?\"\n    };\n\n    const modeMessage: ChatMessage = {\n      id: Date.now().toString(),\n      role: 'assistant',\n      content: modeMessages[mode],\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, modeMessage]);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-2xl max-w-4xl w-full mx-4 h-[80vh] flex flex-col overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b bg-gradient-to-r from-purple-500 to-pink-500 text-white\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">🤖 AI Programming Tutor</h2>\n            <p className=\"text-purple-100 text-sm\">\n              {isLittleCoder ? \"Your friendly coding buddy!\" : \"Personal AI mentor for programming\"}\n            </p>\n          </div>\n          <button \n            onClick={onClose}\n            className=\"text-white hover:text-gray-200 transition\"\n          >\n            <i className=\"fa-solid fa-times text-2xl\"></i>\n          </button>\n        </div>\n\n        {/* Mode Selector */}\n        <div className=\"flex border-b bg-gray-50\">\n          {['chat', 'code-review', 'practice'].map((mode) => (\n            <button\n              key={mode}\n              onClick={() => switchMode(mode as any)}\n              className={`flex-1 py-3 px-4 text-sm font-medium transition ${\n                tutorMode === mode\n                  ? 'bg-white text-purple-600 border-b-2 border-purple-500'\n                  : 'text-gray-600 hover:text-purple-600 hover:bg-gray-100'\n              }`}\n            >\n              {mode === 'chat' && '💬'} {mode === 'code-review' && '🔍'} {mode === 'practice' && '💪'}\n              {' '}\n              {mode.charAt(0).toUpperCase() + mode.slice(1).replace('-', ' ')}\n            </button>\n          ))}\n        </div>\n\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div className={`max-w-[80%] p-4 rounded-2xl ${\n                message.role === 'user'\n                  ? 'bg-purple-500 text-white'\n                  : 'bg-gray-100 text-gray-800'\n              }`}>\n                <p className=\"whitespace-pre-wrap\">{message.content}</p>\n                {message.suggestion && (\n                  <div className=\"mt-3 p-3 bg-white bg-opacity-20 rounded-lg border\">\n                    <div className=\"font-semibold text-sm mb-1\">💡 {message.suggestion.title}</div>\n                    <div className=\"text-sm opacity-90 mb-2\">{message.suggestion.description}</div>\n                    {message.suggestion.code && (\n                      <pre className=\"text-xs bg-black bg-opacity-20 p-2 rounded overflow-x-auto\">\n                        <code>{message.suggestion.code}</code>\n                      </pre>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-gray-100 p-4 rounded-2xl\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-bounce\" style={{animationDelay: '0.1s'}}></div>\n                    <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-bounce\" style={{animationDelay: '0.2s'}}></div>\n                  </div>\n                  <span className=\"text-gray-600 text-sm\">AI Tutor is thinking...</span>\n                </div>\n              </div>\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n\n        {/* Input */}\n        <div className=\"p-4 border-t bg-gray-50\">\n          <div className=\"flex space-x-3\">\n            <textarea\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={\n                tutorMode === 'code-review' \n                  ? \"Paste your code here for review...\"\n                  : tutorMode === 'practice'\n                  ? \"What would you like to practice?\"\n                  : \"Ask me anything about programming...\"\n              }\n              className=\"flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none\"\n              rows={2}\n              disabled={isLoading}\n            />\n            <button\n              onClick={handleSendMessage}\n              disabled={!input.trim() || isLoading}\n              className=\"bg-purple-500 text-white px-6 py-2 rounded-lg hover:bg-purple-600 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <i className=\"fa-solid fa-paper-plane\"></i>\n            </button>\n          </div>\n          <div className=\"text-xs text-gray-500 mt-2\">\n            Press Enter to send, Shift+Enter for new line\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14804},"client/src/components/MicrobitDeviceConnector.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface MicrobitDeviceConnectorProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onDeviceConnected?: (device: any) => void;\n}\n\ninterface ConnectedDevice {\n  id: string;\n  name: string;\n  type: 'microbit' | 'arduino' | 'raspberry-pi';\n  connectionType: 'bluetooth' | 'usb' | 'wifi';\n  status: 'connected' | 'connecting' | 'disconnected' | 'error';\n  batteryLevel?: number;\n  lastSeen: Date;\n}\n\ninterface DeviceData {\n  temperature?: number;\n  lightLevel?: number;\n  accelerometer?: { x: number; y: number; z: number };\n  magnetometer?: { x: number; y: number; z: number };\n  buttonA?: boolean;\n  buttonB?: boolean;\n  ledMatrix?: boolean[][];\n}\n\nexport function MicrobitDeviceConnector({ isOpen, onClose, onDeviceConnected }: MicrobitDeviceConnectorProps) {\n  const { user } = useAuth();\n  const [connectedDevices, setConnectedDevices] = useState<ConnectedDevice[]>([]);\n  const [availableDevices, setAvailableDevices] = useState<any[]>([]);\n  const [isScanning, setIsScanning] = useState(false);\n  const [deviceData, setDeviceData] = useState<DeviceData>({});\n  const [connectionLogs, setConnectionLogs] = useState<string[]>([]);\n  const [selectedTab, setSelectedTab] = useState<'connect' | 'monitor' | 'upload'>('connect');\n  const [codeToUpload, setCodeToUpload] = useState('');\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      startDeviceMonitoring();\n      addLog('Device connector initialized');\n    } else {\n      stopDeviceMonitoring();\n    }\n\n    return () => stopDeviceMonitoring();\n  }, [isOpen]);\n\n  const startDeviceMonitoring = () => {\n    // Simulate real-time data updates from connected devices\n    intervalRef.current = setInterval(() => {\n      if (connectedDevices.length > 0) {\n        setDeviceData({\n          temperature: 20 + Math.random() * 10,\n          lightLevel: Math.floor(Math.random() * 255),\n          accelerometer: {\n            x: (Math.random() - 0.5) * 2000,\n            y: (Math.random() - 0.5) * 2000, \n            z: (Math.random() - 0.5) * 2000\n          },\n          buttonA: Math.random() > 0.9,\n          buttonB: Math.random() > 0.95,\n          ledMatrix: generateRandomLEDMatrix()\n        });\n      }\n    }, 1000);\n  };\n\n  const stopDeviceMonitoring = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  const generateRandomLEDMatrix = (): boolean[][] => {\n    return Array(5).fill(null).map(() => \n      Array(5).fill(null).map(() => Math.random() > 0.8)\n    );\n  };\n\n  const addLog = (message: string) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setConnectionLogs(prev => [...prev.slice(-20), `[${timestamp}] ${message}`]);\n  };\n\n  const scanForDevices = async () => {\n    setIsScanning(true);\n    addLog('Scanning for devices...');\n\n    try {\n      if ('bluetooth' in navigator) {\n        // Web Bluetooth API for micro:bit\n        const device = await (navigator as any).bluetooth.requestDevice({\n          filters: [\n            { namePrefix: 'BBC micro:bit' },\n            { namePrefix: 'micro:bit' }\n          ],\n          optionalServices: [\n            'e95d6100-251d-470a-a062-fa1922dfa9a8', // micro:bit service\n            'e95d9882-251d-470a-a062-fa1922dfa9a8', // accelerometer\n            'e95dd91d-251d-470a-a062-fa1922dfa9a8', // temperature\n            'e95d93ee-251d-470a-a062-fa1922dfa9a8', // IO pin\n            'e95d93b1-251d-470a-a062-fa1922dfa9a8'  // button\n          ]\n        });\n\n        if (device) {\n          setAvailableDevices([{\n            id: device.id || Math.random().toString(),\n            name: device.name || 'micro:bit',\n            type: 'bluetooth',\n            device: device\n          }]);\n          addLog(`Found device: ${device.name}`);\n        }\n      } else {\n        // Simulate device discovery for browsers without Web Bluetooth\n        setTimeout(() => {\n          setAvailableDevices([\n            {\n              id: '1',\n              name: 'micro:bit [gevag]',\n              type: 'bluetooth',\n              signalStrength: -45\n            },\n            {\n              id: '2', \n              name: 'BBC micro:bit [v2.0]',\n              type: 'bluetooth',\n              signalStrength: -62\n            }\n          ]);\n          addLog('Simulated devices found (Web Bluetooth not available)');\n        }, 2000);\n      }\n    } catch (error) {\n      addLog(`Scan failed: ${error}`);\n      console.error('Device scan error:', error);\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  const connectToDevice = async (deviceInfo: any) => {\n    addLog(`Connecting to ${deviceInfo.name}...`);\n    \n    try {\n      let gattServer = null;\n      \n      if (deviceInfo.device && 'bluetooth' in navigator) {\n        // Real Web Bluetooth connection\n        gattServer = await deviceInfo.device.gatt.connect();\n        addLog('GATT server connected');\n\n        // Subscribe to device services\n        try {\n          const service = await gattServer.getPrimaryService('e95d6100-251d-470a-a062-fa1922dfa9a8');\n          addLog('micro:bit service found');\n        } catch (e) {\n          addLog('Could not access micro:bit service');\n        }\n      }\n\n      const newDevice: ConnectedDevice = {\n        id: deviceInfo.id,\n        name: deviceInfo.name,\n        type: 'microbit',\n        connectionType: 'bluetooth',\n        status: 'connected',\n        batteryLevel: Math.floor(Math.random() * 100),\n        lastSeen: new Date()\n      };\n\n      setConnectedDevices(prev => [...prev, newDevice]);\n      setAvailableDevices(prev => prev.filter(d => d.id !== deviceInfo.id));\n      addLog(`Successfully connected to ${deviceInfo.name}`);\n      \n      if (onDeviceConnected) {\n        onDeviceConnected(newDevice);\n      }\n\n    } catch (error) {\n      addLog(`Connection failed: ${error}`);\n      console.error('Connection error:', error);\n    }\n  };\n\n  const disconnectDevice = (deviceId: string) => {\n    const device = connectedDevices.find(d => d.id === deviceId);\n    if (device) {\n      setConnectedDevices(prev => prev.filter(d => d.id !== deviceId));\n      addLog(`Disconnected from ${device.name}`);\n    }\n  };\n\n  const uploadCode = () => {\n    if (!codeToUpload.trim()) {\n      addLog('No code to upload');\n      return;\n    }\n\n    const connectedMicrobit = connectedDevices.find(d => d.type === 'microbit');\n    if (!connectedMicrobit) {\n      addLog('No micro:bit connected');\n      return;\n    }\n\n    addLog(`Uploading code to ${connectedMicrobit.name}...`);\n    \n    // Simulate code upload\n    setTimeout(() => {\n      addLog('Code compiled successfully');\n      setTimeout(() => {\n        addLog('Code uploaded to device');\n        addLog('Device restarted and running new code');\n      }, 1500);\n    }, 1000);\n  };\n\n  const preloadedPrograms = [\n    {\n      name: 'Heart Beat',\n      code: `from microbit import *\n\nwhile True:\n    display.show(Image.HEART)\n    sleep(500)\n    display.show(Image.HEART_SMALL)\n    sleep(500)`\n    },\n    {\n      name: 'Temperature Monitor',\n      code: `from microbit import *\n\nwhile True:\n    temp = temperature()\n    display.scroll(str(temp) + \"C\")\n    sleep(2000)`\n    },\n    {\n      name: 'Compass',\n      code: `from microbit import *\n\ncompass.calibrate()\n\nwhile True:\n    heading = compass.heading()\n    if heading < 45 or heading > 315:\n        display.show(\"N\")\n    elif 45 <= heading < 135:\n        display.show(\"E\") \n    elif 135 <= heading < 225:\n        display.show(\"S\")\n    else:\n        display.show(\"W\")\n    sleep(500)`\n    }\n  ];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-2xl max-w-5xl w-full mx-4 h-[85vh] flex flex-col overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b bg-gradient-to-r from-green-500 to-blue-500 text-white\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">🔌 Device Connector</h2>\n            <p className=\"text-green-100 text-sm\">Connect and control physical micro:bit devices</p>\n          </div>\n          <button \n            onClick={onClose}\n            className=\"text-white hover:text-gray-200 transition\"\n          >\n            <i className=\"fa-solid fa-times text-2xl\"></i>\n          </button>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"flex border-b bg-gray-50\">\n          {[\n            { id: 'connect', icon: '🔗', label: 'Connect' },\n            { id: 'monitor', icon: '📊', label: 'Monitor' },\n            { id: 'upload', icon: '📤', label: 'Upload Code' }\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setSelectedTab(tab.id as any)}\n              className={`flex-1 py-3 px-4 text-sm font-medium transition ${\n                selectedTab === tab.id\n                  ? 'bg-white text-blue-600 border-b-2 border-blue-500'\n                  : 'text-gray-600 hover:text-blue-600 hover:bg-gray-100'\n              }`}\n            >\n              {tab.icon} {tab.label}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Main Content */}\n          <div className=\"flex-1 p-6 overflow-y-auto\">\n            {selectedTab === 'connect' && (\n              <div className=\"space-y-6\">\n                {/* Connected Devices */}\n                <div>\n                  <h3 className=\"text-lg font-bold mb-4\">Connected Devices</h3>\n                  {connectedDevices.length === 0 ? (\n                    <div className=\"text-gray-500 text-center py-8\">\n                      No devices connected\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {connectedDevices.map((device) => (\n                        <div key={device.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                            <div>\n                              <div className=\"font-semibold\">{device.name}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                {device.connectionType} • Battery: {device.batteryLevel}%\n                              </div>\n                            </div>\n                          </div>\n                          <button\n                            onClick={() => disconnectDevice(device.id)}\n                            className=\"bg-red-500 text-white px-3 py-1 rounded text-sm hover:bg-red-600 transition\"\n                          >\n                            Disconnect\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Available Devices */}\n                <div>\n                  <div className=\"flex justify-between items-center mb-4\">\n                    <h3 className=\"text-lg font-bold\">Available Devices</h3>\n                    <button\n                      onClick={scanForDevices}\n                      disabled={isScanning}\n                      className=\"bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition disabled:opacity-50\"\n                    >\n                      {isScanning ? (\n                        <>\n                          <i className=\"fa-solid fa-spinner fa-spin mr-2\"></i>\n                          Scanning...\n                        </>\n                      ) : (\n                        <>\n                          <i className=\"fa-solid fa-search mr-2\"></i>\n                          Scan for Devices\n                        </>\n                      )}\n                    </button>\n                  </div>\n                  \n                  {availableDevices.length === 0 ? (\n                    <div className=\"text-gray-500 text-center py-8\">\n                      Click \"Scan for Devices\" to find nearby micro:bits\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {availableDevices.map((device) => (\n                        <div key={device.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"text-2xl\">🔵</div>\n                            <div>\n                              <div className=\"font-semibold\">{device.name}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                {device.signalStrength ? `Signal: ${device.signalStrength} dBm` : 'Bluetooth LE'}\n                              </div>\n                            </div>\n                          </div>\n                          <button\n                            onClick={() => connectToDevice(device)}\n                            className=\"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition\"\n                          >\n                            Connect\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {selectedTab === 'monitor' && (\n              <div className=\"space-y-6\">\n                {connectedDevices.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"text-4xl mb-4\">🔌</div>\n                    <p className=\"text-gray-500\">Connect a device to monitor sensor data</p>\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      {/* Sensor Data */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-bold\">Sensor Data</h3>\n                        \n                        <div className=\"p-4 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"font-medium\">Temperature</span>\n                            <span className=\"text-2xl font-bold text-red-500\">\n                              {deviceData.temperature?.toFixed(1)}°C\n                            </span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"bg-red-500 h-2 rounded-full transition-all duration-500\"\n                              style={{width: `${Math.min(((deviceData.temperature || 0) / 50) * 100, 100)}%`}}\n                            ></div>\n                          </div>\n                        </div>\n\n                        <div className=\"p-4 border border-gray-200 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"font-medium\">Light Level</span>\n                            <span className=\"text-2xl font-bold text-yellow-500\">\n                              {deviceData.lightLevel}\n                            </span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"bg-yellow-500 h-2 rounded-full transition-all duration-500\"\n                              style={{width: `${((deviceData.lightLevel || 0) / 255) * 100}%`}}\n                            ></div>\n                          </div>\n                        </div>\n\n                        <div className=\"p-4 border border-gray-200 rounded-lg\">\n                          <div className=\"font-medium mb-2\">Accelerometer</div>\n                          <div className=\"space-y-1 text-sm\">\n                            <div>X: {deviceData.accelerometer?.x.toFixed(0)} mg</div>\n                            <div>Y: {deviceData.accelerometer?.y.toFixed(0)} mg</div>\n                            <div>Z: {deviceData.accelerometer?.z.toFixed(0)} mg</div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* LED Matrix & Buttons */}\n                      <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-bold\">LED Matrix</h3>\n                        <div className=\"flex justify-center\">\n                          <div className=\"grid grid-cols-5 gap-1 p-4 bg-gray-100 rounded-lg\">\n                            {deviceData.ledMatrix?.flat().map((isOn, index) => (\n                              <div\n                                key={index}\n                                className={`w-8 h-8 rounded border-2 transition-all duration-300 ${\n                                  isOn \n                                    ? 'bg-red-500 border-red-600 shadow-md' \n                                    : 'bg-gray-300 border-gray-400'\n                                }`}\n                              />\n                            ))}\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-center space-x-4\">\n                          <div className={`p-4 rounded-lg border-2 transition-all ${\n                            deviceData.buttonA \n                              ? 'bg-blue-500 text-white border-blue-600' \n                              : 'bg-gray-100 border-gray-300'\n                          }`}>\n                            Button A\n                          </div>\n                          <div className={`p-4 rounded-lg border-2 transition-all ${\n                            deviceData.buttonB \n                              ? 'bg-blue-500 text-white border-blue-600' \n                              : 'bg-gray-100 border-gray-300'\n                          }`}>\n                            Button B\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </>\n                )}\n              </div>\n            )}\n\n            {selectedTab === 'upload' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-bold mb-4\">Upload Code to Device</h3>\n                  \n                  {/* Preloaded Programs */}\n                  <div className=\"mb-6\">\n                    <h4 className=\"font-medium mb-3\">Quick Start Programs</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                      {preloadedPrograms.map((program) => (\n                        <button\n                          key={program.name}\n                          onClick={() => setCodeToUpload(program.code)}\n                          className=\"p-3 border border-gray-300 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition text-left\"\n                        >\n                          <div className=\"font-medium\">{program.name}</div>\n                          <div className=\"text-sm text-gray-500 mt-1\">\n                            Click to load\n                          </div>\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Code Editor */}\n                  <div>\n                    <h4 className=\"font-medium mb-3\">Python Code</h4>\n                    <textarea\n                      value={codeToUpload}\n                      onChange={(e) => setCodeToUpload(e.target.value)}\n                      placeholder=\"Enter your Python code for micro:bit here...\"\n                      className=\"w-full h-64 border border-gray-300 rounded-lg px-4 py-3 font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    />\n                  </div>\n\n                  <div className=\"flex space-x-3\">\n                    <button\n                      onClick={uploadCode}\n                      disabled={connectedDevices.length === 0}\n                      className=\"bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                    >\n                      <i className=\"fa-solid fa-upload mr-2\"></i>\n                      Upload to Device\n                    </button>\n                    <button\n                      onClick={() => setCodeToUpload('')}\n                      className=\"border border-gray-300 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-50 transition\"\n                    >\n                      Clear\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Connection Logs Sidebar */}\n          <div className=\"w-80 border-l border-gray-200 bg-gray-50 p-4\">\n            <h3 className=\"font-bold mb-3\">Connection Log</h3>\n            <div className=\"bg-black text-green-400 rounded-lg p-3 h-64 overflow-y-auto font-mono text-xs\">\n              {connectionLogs.map((log, index) => (\n                <div key={index} className=\"mb-1\">{log}</div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21605},"client/src/components/RoboticsLabModal.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface RoboticsLabModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  activity?: any;\n}\n\ninterface RobotCommand {\n  id: string;\n  type: 'move' | 'turn' | 'led' | 'sensor' | 'wait' | 'loop';\n  parameters: any;\n  description: string;\n}\n\ninterface RobotPosition {\n  x: number;\n  y: number;\n  angle: number;\n}\n\nexport function RoboticsLabModal({ isOpen, onClose, activity }: RoboticsLabModalProps) {\n  const { user } = useAuth();\n  const [commands, setCommands] = useState<RobotCommand[]>([]);\n  const [selectedCommand, setSelectedCommand] = useState<string>('move');\n  const [robotPosition, setRobotPosition] = useState<RobotPosition>({ x: 400, y: 300, angle: 0 });\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentCommandIndex, setCurrentCommandIndex] = useState(-1);\n  const [connectedDevice, setConnectedDevice] = useState<any>(null);\n  const [labMode, setLabMode] = useState<'visual' | 'blocks' | 'code'>('visual');\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const isLittleCoder = user?.ageGroup === '6-11';\n\n  const commandTypes = [\n    { \n      id: 'move', \n      label: 'Move Forward', \n      icon: '⬆️', \n      parameters: { distance: 100 },\n      color: '#3B82F6' \n    },\n    { \n      id: 'turn', \n      label: 'Turn', \n      icon: '↻', \n      parameters: { angle: 90, direction: 'right' },\n      color: '#10B981' \n    },\n    { \n      id: 'led', \n      label: 'LED Display', \n      icon: '💡', \n      parameters: { pattern: 'heart', brightness: 9 },\n      color: '#F59E0B' \n    },\n    { \n      id: 'sensor', \n      label: 'Read Sensor', \n      icon: '📡', \n      parameters: { type: 'temperature' },\n      color: '#8B5CF6' \n    },\n    { \n      id: 'wait', \n      label: 'Wait', \n      icon: '⏱️', \n      parameters: { duration: 1000 },\n      color: '#EF4444' \n    },\n    { \n      id: 'loop', \n      label: 'Repeat', \n      icon: '🔄', \n      parameters: { times: 3, commands: [] },\n      color: '#EC4899' \n    }\n  ];\n\n  useEffect(() => {\n    if (isOpen) {\n      drawCanvas();\n    }\n  }, [isOpen, robotPosition, currentCommandIndex]);\n\n  const drawCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = '#F3F4F6';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw grid\n    ctx.strokeStyle = '#E5E7EB';\n    ctx.lineWidth = 1;\n    for (let x = 0; x < canvas.width; x += 50) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, canvas.height);\n      ctx.stroke();\n    }\n    for (let y = 0; y < canvas.height; y += 50) {\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(canvas.width, y);\n      ctx.stroke();\n    }\n\n    // Draw activity-specific elements\n    if (activity?.type === 'maze') {\n      drawMaze(ctx);\n    } else if (activity?.type === 'line-following') {\n      drawPath(ctx);\n    }\n\n    // Draw robot\n    drawRobot(ctx, robotPosition.x, robotPosition.y, robotPosition.angle);\n\n    // Draw path preview\n    if (commands.length > 0) {\n      drawCommandPath(ctx);\n    }\n  };\n\n  const drawMaze = (ctx: CanvasRenderingContext2D) => {\n    // Simple maze walls\n    ctx.fillStyle = '#374151';\n    const walls = [\n      { x: 100, y: 100, width: 200, height: 20 },\n      { x: 100, y: 200, width: 20, height: 200 },\n      { x: 400, y: 150, width: 20, height: 150 },\n      { x: 500, y: 250, width: 150, height: 20 }\n    ];\n    walls.forEach(wall => {\n      ctx.fillRect(wall.x, wall.y, wall.width, wall.height);\n    });\n\n    // Goal\n    ctx.fillStyle = '#10B981';\n    ctx.fillRect(700, 500, 50, 50);\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '16px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('🎯', 725, 535);\n  };\n\n  const drawPath = (ctx: CanvasRenderingContext2D) => {\n    // Draw line to follow\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 8;\n    ctx.beginPath();\n    ctx.moveTo(50, 300);\n    ctx.quadraticCurveTo(400, 100, 750, 300);\n    ctx.quadraticCurveTo(400, 500, 50, 300);\n    ctx.stroke();\n  };\n\n  const drawRobot = (ctx: CanvasRenderingContext2D, x: number, y: number, angle: number) => {\n    ctx.save();\n    ctx.translate(x, y);\n    ctx.rotate((angle * Math.PI) / 180);\n\n    // Robot body\n    ctx.fillStyle = currentCommandIndex >= 0 ? '#EF4444' : '#3B82F6';\n    ctx.fillRect(-15, -15, 30, 30);\n\n    // Direction indicator\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(10, -5, 8, 10);\n\n    // Sensors\n    ctx.fillStyle = '#10B981';\n    ctx.fillRect(-12, -12, 6, 6);\n    ctx.fillRect(6, -12, 6, 6);\n\n    ctx.restore();\n  };\n\n  const drawCommandPath = (ctx: CanvasRenderingContext2D) => {\n    let currentPos = { ...robotPosition };\n    \n    ctx.strokeStyle = '#8B5CF6';\n    ctx.lineWidth = 2;\n    ctx.setLineDash([5, 5]);\n\n    commands.forEach((command, index) => {\n      if (command.type === 'move') {\n        const distance = command.parameters.distance;\n        const newX = currentPos.x + Math.cos((currentPos.angle * Math.PI) / 180) * distance;\n        const newY = currentPos.y + Math.sin((currentPos.angle * Math.PI) / 180) * distance;\n\n        ctx.beginPath();\n        ctx.moveTo(currentPos.x, currentPos.y);\n        ctx.lineTo(newX, newY);\n        ctx.stroke();\n\n        currentPos.x = newX;\n        currentPos.y = newY;\n      } else if (command.type === 'turn') {\n        currentPos.angle += command.parameters.direction === 'right' ? \n          command.parameters.angle : -command.parameters.angle;\n      }\n    });\n\n    ctx.setLineDash([]);\n  };\n\n  const addCommand = () => {\n    const commandType = commandTypes.find(ct => ct.id === selectedCommand);\n    if (!commandType) return;\n\n    const newCommand: RobotCommand = {\n      id: Date.now().toString(),\n      type: selectedCommand as any,\n      parameters: { ...commandType.parameters },\n      description: `${commandType.label} - ${JSON.stringify(commandType.parameters)}`\n    };\n\n    setCommands(prev => [...prev, newCommand]);\n  };\n\n  const removeCommand = (commandId: string) => {\n    setCommands(prev => prev.filter(cmd => cmd.id !== commandId));\n  };\n\n  const executeCommands = async () => {\n    if (commands.length === 0) return;\n\n    setIsRunning(true);\n    let currentPos = { ...robotPosition };\n\n    for (let i = 0; i < commands.length; i++) {\n      setCurrentCommandIndex(i);\n      const command = commands[i];\n      \n      // Send to connected device if available\n      if (connectedDevice) {\n        await sendCommandToDevice(command);\n      }\n\n      // Simulate command execution\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Update visual position\n      if (command.type === 'move') {\n        const distance = command.parameters.distance;\n        currentPos.x += Math.cos((currentPos.angle * Math.PI) / 180) * distance;\n        currentPos.y += Math.sin((currentPos.angle * Math.PI) / 180) * distance;\n      } else if (command.type === 'turn') {\n        currentPos.angle += command.parameters.direction === 'right' ? \n          command.parameters.angle : -command.parameters.angle;\n      }\n\n      setRobotPosition({ ...currentPos });\n    }\n\n    setCurrentCommandIndex(-1);\n    setIsRunning(false);\n  };\n\n  const sendCommandToDevice = async (command: RobotCommand) => {\n    // Convert command to micro:bit Python code\n    let pythonCode = '';\n    \n    switch (command.type) {\n      case 'move':\n        pythonCode = `\nfrom microbit import *\nimport radio\n\nradio.config(channel=7)\nradio.send(\"move:${command.parameters.distance}\")\nsleep(${command.parameters.distance * 10})\n`;\n        break;\n      case 'turn':\n        pythonCode = `\nfrom microbit import *\nimport radio\n\nradio.config(channel=7)\nradio.send(\"turn:${command.parameters.direction}:${command.parameters.angle}\")\nsleep(500)\n`;\n        break;\n      case 'led':\n        pythonCode = `\nfrom microbit import *\n\nif \"${command.parameters.pattern}\" == \"heart\":\n    display.show(Image.HEART)\nelif \"${command.parameters.pattern}\" == \"happy\":\n    display.show(Image.HAPPY)\nelse:\n    display.show(\"${command.parameters.pattern}\")\nsleep(1000)\n`;\n        break;\n      case 'wait':\n        pythonCode = `\nfrom microbit import *\nsleep(${command.parameters.duration})\n`;\n        break;\n    }\n\n    console.log('Sending to device:', pythonCode);\n    // Here you would send the actual command to the connected micro:bit\n  };\n\n  const resetRobot = () => {\n    setRobotPosition({ x: 400, y: 300, angle: 0 });\n    setCurrentCommandIndex(-1);\n  };\n\n  const generateBlocksView = () => {\n    return (\n      <div className=\"space-y-3\">\n        <div className=\"text-sm font-medium text-gray-700 mb-3\">Drag blocks to create your program:</div>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {commandTypes.map((cmdType) => (\n            <div\n              key={cmdType.id}\n              className=\"p-3 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-400 cursor-pointer transition\"\n              onClick={() => {\n                setSelectedCommand(cmdType.id);\n                addCommand();\n              }}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-2xl\">{cmdType.icon}</span>\n                <span className=\"text-sm font-medium\">{cmdType.label}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {commands.length > 0 && (\n          <div className=\"mt-4\">\n            <div className=\"text-sm font-medium text-gray-700 mb-2\">Your Program:</div>\n            <div className=\"space-y-2\">\n              {commands.map((command, index) => {\n                const cmdType = commandTypes.find(ct => ct.id === command.type);\n                return (\n                  <div\n                    key={command.id}\n                    className={`flex items-center justify-between p-3 rounded-lg border-2 ${\n                      currentCommandIndex === index ? 'border-red-400 bg-red-50' : 'border-gray-300'\n                    }`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-lg\">{cmdType?.icon}</span>\n                      <span className=\"font-medium\">{cmdType?.label}</span>\n                      <span className=\"text-sm text-gray-500\">\n                        {JSON.stringify(command.parameters)}\n                      </span>\n                    </div>\n                    <button\n                      onClick={() => removeCommand(command.id)}\n                      className=\"text-red-500 hover:text-red-700 p-1\"\n                    >\n                      <i className=\"fa-solid fa-trash text-sm\"></i>\n                    </button>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const generateCodeView = () => {\n    let pythonCode = `from microbit import *\nimport radio\n\n# Initialize\nradio.config(channel=7)\ndisplay.show(Image.HAPPY)\n\n# Main program\n`;\n\n    commands.forEach((command) => {\n      switch (command.type) {\n        case 'move':\n          pythonCode += `\n# Move forward ${command.parameters.distance} units\nradio.send(\"move:${command.parameters.distance}\")\nsleep(${command.parameters.distance * 10})\n`;\n          break;\n        case 'turn':\n          pythonCode += `\n# Turn ${command.parameters.direction} ${command.parameters.angle} degrees  \nradio.send(\"turn:${command.parameters.direction}:${command.parameters.angle}\")\nsleep(500)\n`;\n          break;\n        case 'led':\n          pythonCode += `\n# Display ${command.parameters.pattern}\ndisplay.show(Image.${command.parameters.pattern.toUpperCase()})\nsleep(1000)\n`;\n          break;\n        case 'wait':\n          pythonCode += `\n# Wait ${command.parameters.duration}ms\nsleep(${command.parameters.duration})\n`;\n          break;\n      }\n    });\n\n    pythonCode += `\n# Program complete\ndisplay.show(Image.YES)`;\n\n    return (\n      <div className=\"space-y-3\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm font-medium text-gray-700\">Generated Python Code:</span>\n          <button className=\"text-blue-500 hover:text-blue-700 text-sm\">\n            <i className=\"fa-solid fa-copy mr-1\"></i>Copy Code\n          </button>\n        </div>\n        <pre className=\"bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm font-mono\">\n          {pythonCode}\n        </pre>\n      </div>\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center\">\n      <div className=\"bg-white rounded-2xl max-w-7xl w-full mx-4 h-[90vh] flex flex-col overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">🤖 Robotics Visual Lab</h2>\n            <p className=\"text-blue-100 text-sm\">\n              {activity?.title || 'Design robot commands and test them visually'}\n            </p>\n          </div>\n          <button \n            onClick={onClose}\n            className=\"text-white hover:text-gray-200 transition\"\n          >\n            <i className=\"fa-solid fa-times text-2xl\"></i>\n          </button>\n        </div>\n\n        {/* Mode Tabs */}\n        <div className=\"flex border-b bg-gray-50\">\n          {[\n            { id: 'visual', label: 'Visual Programming', icon: '🎮' },\n            { id: 'blocks', label: 'Block Coding', icon: '🧩' },\n            { id: 'code', label: 'Python Code', icon: '💻' }\n          ].map((mode) => (\n            <button\n              key={mode.id}\n              onClick={() => setLabMode(mode.id as any)}\n              className={`flex-1 py-3 px-4 text-sm font-medium transition ${\n                labMode === mode.id\n                  ? 'bg-white text-blue-600 border-b-2 border-blue-500'\n                  : 'text-gray-600 hover:text-blue-600 hover:bg-gray-100'\n              }`}\n            >\n              {mode.icon} {mode.label}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Canvas Area */}\n          <div className=\"flex-1 p-4 bg-gray-50\">\n            <div className=\"bg-white rounded-lg p-4 h-full flex flex-col\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"font-bold text-lg\">\n                  {activity?.title || 'Robot Simulation'}\n                </h3>\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={resetRobot}\n                    className=\"bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600 transition\"\n                  >\n                    Reset\n                  </button>\n                  <button\n                    onClick={executeCommands}\n                    disabled={isRunning || commands.length === 0}\n                    className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition disabled:opacity-50\"\n                  >\n                    {isRunning ? 'Running...' : 'Run Program'}\n                  </button>\n                </div>\n              </div>\n              \n              <canvas\n                ref={canvasRef}\n                width={800}\n                height={600}\n                className=\"border border-gray-300 rounded-lg flex-1\"\n              />\n            </div>\n          </div>\n\n          {/* Command Panel */}\n          <div className=\"w-80 border-l border-gray-200 bg-white p-4 overflow-y-auto\">\n            {labMode === 'visual' && (\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-bold text-lg mb-3\">Command Center</h3>\n                  \n                  <div className=\"space-y-3\">\n                    <select\n                      value={selectedCommand}\n                      onChange={(e) => setSelectedCommand(e.target.value)}\n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                    >\n                      {commandTypes.map((cmd) => (\n                        <option key={cmd.id} value={cmd.id}>\n                          {cmd.icon} {cmd.label}\n                        </option>\n                      ))}\n                    </select>\n\n                    <button\n                      onClick={addCommand}\n                      className=\"w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition\"\n                    >\n                      Add Command\n                    </button>\n                  </div>\n                </div>\n\n                {/* Command List */}\n                <div>\n                  <h4 className=\"font-medium mb-2\">Program ({commands.length} commands)</h4>\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {commands.map((command, index) => {\n                      const cmdType = commandTypes.find(ct => ct.id === command.type);\n                      return (\n                        <div\n                          key={command.id}\n                          className={`p-3 rounded-lg border text-sm ${\n                            currentCommandIndex === index \n                              ? 'border-red-400 bg-red-50' \n                              : 'border-gray-200 bg-gray-50'\n                          }`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span>{cmdType?.icon}</span>\n                              <span className=\"font-medium\">{index + 1}. {cmdType?.label}</span>\n                            </div>\n                            <button\n                              onClick={() => removeCommand(command.id)}\n                              className=\"text-red-500 hover:text-red-700\"\n                            >\n                              <i className=\"fa-solid fa-trash text-xs\"></i>\n                            </button>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n\n                {/* Device Connection Status */}\n                <div className=\"border-t pt-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Device Connection</span>\n                    <div className={`w-3 h-3 rounded-full ${connectedDevice ? 'bg-green-500' : 'bg-gray-300'}`}></div>\n                  </div>\n                  <p className=\"text-xs text-gray-500\">\n                    {connectedDevice ? 'Connected to micro:bit' : 'No device connected'}\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {labMode === 'blocks' && generateBlocksView()}\n            {labMode === 'code' && generateCodeView()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19243},"client/src/components/VideoConferenceModal.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface VideoConferenceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface Participant {\n  id: string;\n  name: string;\n  role: 'teacher' | 'student';\n  isVideoOn: boolean;\n  isAudioOn: boolean;\n  stream?: MediaStream;\n}\n\ninterface ScreenShareData {\n  isSharing: boolean;\n  sharedBy: string;\n  stream?: MediaStream;\n}\n\nexport function VideoConferenceModal({ isOpen, onClose }: VideoConferenceModalProps) {\n  const { user } = useAuth();\n  const [participants, setParticipants] = useState<Participant[]>([]);\n  const [isVideoOn, setIsVideoOn] = useState(true);\n  const [isAudioOn, setIsAudioOn] = useState(true);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [screenShare, setScreenShare] = useState<ScreenShareData>({ isSharing: false, sharedBy: '' });\n  const [chatMessages, setChatMessages] = useState<{id: string; sender: string; message: string; timestamp: Date}[]>([]);\n  const [chatInput, setChatInput] = useState('');\n  const [showChat, setShowChat] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('connecting');\n  \n  const localVideoRef = useRef<HTMLVideoElement>(null);\n  const screenShareRef = useRef<HTMLVideoElement>(null);\n  const localStreamRef = useRef<MediaStream | null>(null);\n  const screenStreamRef = useRef<MediaStream | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      initializeVideo();\n      simulateConnection();\n    } else {\n      cleanup();\n    }\n\n    return () => cleanup();\n  }, [isOpen]);\n\n  const initializeVideo = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ \n        video: true, \n        audio: true \n      });\n      \n      localStreamRef.current = stream;\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n\n      // Add current user as participant\n      setParticipants([{\n        id: user?.id || 'local',\n        name: user?.name || 'You',\n        role: user?.role as 'teacher' | 'student',\n        isVideoOn: true,\n        isAudioOn: true,\n        stream\n      }]);\n\n    } catch (error) {\n      console.error('Error accessing media devices:', error);\n      alert('Unable to access camera/microphone. Please check permissions.');\n    }\n  };\n\n  const simulateConnection = () => {\n    setTimeout(() => {\n      setConnectionStatus('connected');\n      \n      // Simulate other participants joining (for demo purposes)\n      if (user?.role === 'student') {\n        setParticipants(prev => [...prev, {\n          id: 'teacher-1',\n          name: 'Ms. Johnson',\n          role: 'teacher',\n          isVideoOn: true,\n          isAudioOn: true\n        }]);\n      } else {\n        setParticipants(prev => [...prev, \n          {\n            id: 'student-1',\n            name: 'Alice',\n            role: 'student',\n            isVideoOn: true,\n            isAudioOn: false\n          },\n          {\n            id: 'student-2', \n            name: 'Bob',\n            role: 'student',\n            isVideoOn: false,\n            isAudioOn: true\n          }\n        ]);\n      }\n    }, 2000);\n  };\n\n  const cleanup = () => {\n    if (localStreamRef.current) {\n      localStreamRef.current.getTracks().forEach(track => track.stop());\n      localStreamRef.current = null;\n    }\n    if (screenStreamRef.current) {\n      screenStreamRef.current.getTracks().forEach(track => track.stop());\n      screenStreamRef.current = null;\n    }\n    setParticipants([]);\n    setConnectionStatus('disconnected');\n  };\n\n  const toggleVideo = () => {\n    const videoTrack = localStreamRef.current?.getVideoTracks()[0];\n    if (videoTrack) {\n      videoTrack.enabled = !videoTrack.enabled;\n      setIsVideoOn(videoTrack.enabled);\n      \n      // Update participant state\n      setParticipants(prev => prev.map(p => \n        p.id === (user?.id || 'local') \n          ? { ...p, isVideoOn: videoTrack.enabled }\n          : p\n      ));\n    }\n  };\n\n  const toggleAudio = () => {\n    const audioTrack = localStreamRef.current?.getAudioTracks()[0];\n    if (audioTrack) {\n      audioTrack.enabled = !audioTrack.enabled;\n      setIsAudioOn(audioTrack.enabled);\n      \n      // Update participant state\n      setParticipants(prev => prev.map(p => \n        p.id === (user?.id || 'local')\n          ? { ...p, isAudioOn: audioTrack.enabled }\n          : p\n      ));\n    }\n  };\n\n  const startScreenShare = async () => {\n    try {\n      const screenStream = await navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: true\n      });\n      \n      screenStreamRef.current = screenStream;\n      if (screenShareRef.current) {\n        screenShareRef.current.srcObject = screenStream;\n      }\n      \n      setIsScreenSharing(true);\n      setScreenShare({\n        isSharing: true,\n        sharedBy: user?.name || 'You',\n        stream: screenStream\n      });\n\n      // Listen for screen share end\n      screenStream.getVideoTracks()[0].addEventListener('ended', stopScreenShare);\n      \n    } catch (error) {\n      console.error('Error starting screen share:', error);\n    }\n  };\n\n  const stopScreenShare = () => {\n    if (screenStreamRef.current) {\n      screenStreamRef.current.getTracks().forEach(track => track.stop());\n      screenStreamRef.current = null;\n    }\n    setIsScreenSharing(false);\n    setScreenShare({ isSharing: false, sharedBy: '' });\n  };\n\n  const sendChatMessage = () => {\n    if (!chatInput.trim()) return;\n\n    const message = {\n      id: Date.now().toString(),\n      sender: user?.name || 'You',\n      message: chatInput,\n      timestamp: new Date()\n    };\n\n    setChatMessages(prev => [...prev, message]);\n    setChatInput('');\n  };\n\n  const leaveCall = () => {\n    cleanup();\n    onClose();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black\">\n      <div className=\"h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-4 bg-gray-900 text-white\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-3 h-3 rounded-full ${\n              connectionStatus === 'connected' ? 'bg-green-500' : \n              connectionStatus === 'connecting' ? 'bg-yellow-500' : 'bg-red-500'\n            }`}></div>\n            <h2 className=\"text-xl font-bold\">\n              {user?.role === 'teacher' ? 'Teaching Session' : 'Learning Session'}\n            </h2>\n            <span className=\"text-gray-300 text-sm\">\n              {participants.length} participant{participants.length !== 1 ? 's' : ''}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setShowChat(!showChat)}\n              className=\"bg-gray-700 hover:bg-gray-600 px-3 py-2 rounded-lg transition\"\n            >\n              <i className=\"fa-solid fa-comments mr-2\"></i>\n              Chat\n            </button>\n            <button\n              onClick={leaveCall}\n              className=\"bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg transition\"\n            >\n              <i className=\"fa-solid fa-sign-out-alt mr-2\"></i>\n              Leave\n            </button>\n          </div>\n        </div>\n\n        {/* Video Area */}\n        <div className=\"flex-1 flex\">\n          {/* Main Video Area */}\n          <div className={`${showChat ? 'w-3/4' : 'w-full'} flex flex-col`}>\n            {/* Screen Share or Main Video */}\n            <div className=\"flex-1 bg-gray-800 relative\">\n              {screenShare.isSharing ? (\n                <div className=\"w-full h-full\">\n                  <video\n                    ref={screenShareRef}\n                    autoPlay\n                    muted\n                    className=\"w-full h-full object-contain\"\n                  />\n                  <div className=\"absolute top-4 left-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded\">\n                    Screen shared by {screenShare.sharedBy}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"grid grid-cols-2 gap-2 p-4 h-full\">\n                  {participants.slice(0, 4).map((participant) => (\n                    <div key={participant.id} className=\"relative bg-gray-700 rounded-lg overflow-hidden\">\n                      {participant.isVideoOn ? (\n                        participant.id === (user?.id || 'local') ? (\n                          <video\n                            ref={localVideoRef}\n                            autoPlay\n                            muted\n                            className=\"w-full h-full object-cover mirror\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n                            <div className=\"text-4xl\">\n                              {participant.name.charAt(0).toUpperCase()}\n                            </div>\n                          </div>\n                        )\n                      ) : (\n                        <div className=\"w-full h-full bg-gray-600 flex items-center justify-center\">\n                          <div className=\"text-center text-white\">\n                            <div className=\"text-4xl mb-2\">\n                              {participant.name.charAt(0).toUpperCase()}\n                            </div>\n                            <div className=\"text-sm\">{participant.name}</div>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Participant Info */}\n                      <div className=\"absolute bottom-2 left-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm\">\n                        {participant.name}\n                        {participant.role === 'teacher' && ' 👩‍🏫'}\n                      </div>\n                      \n                      {/* Audio/Video Status */}\n                      <div className=\"absolute top-2 right-2 flex space-x-1\">\n                        {!participant.isAudioOn && (\n                          <div className=\"bg-red-500 text-white p-1 rounded\">\n                            <i className=\"fa-solid fa-microphone-slash text-xs\"></i>\n                          </div>\n                        )}\n                        {!participant.isVideoOn && (\n                          <div className=\"bg-red-500 text-white p-1 rounded\">\n                            <i className=\"fa-solid fa-video-slash text-xs\"></i>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Controls */}\n            <div className=\"bg-gray-900 p-4 flex justify-center space-x-4\">\n              <button\n                onClick={toggleAudio}\n                className={`p-3 rounded-full transition ${\n                  isAudioOn ? 'bg-gray-700 hover:bg-gray-600' : 'bg-red-600 hover:bg-red-700'\n                }`}\n              >\n                <i className={`fa-solid ${isAudioOn ? 'fa-microphone' : 'fa-microphone-slash'} text-white`}></i>\n              </button>\n              \n              <button\n                onClick={toggleVideo}\n                className={`p-3 rounded-full transition ${\n                  isVideoOn ? 'bg-gray-700 hover:bg-gray-600' : 'bg-red-600 hover:bg-red-700'\n                }`}\n              >\n                <i className={`fa-solid ${isVideoOn ? 'fa-video' : 'fa-video-slash'} text-white`}></i>\n              </button>\n              \n              {user?.role === 'teacher' && (\n                <button\n                  onClick={isScreenSharing ? stopScreenShare : startScreenShare}\n                  className={`p-3 rounded-full transition ${\n                    isScreenSharing ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-700 hover:bg-gray-600'\n                  }`}\n                >\n                  <i className=\"fa-solid fa-desktop text-white\"></i>\n                </button>\n              )}\n              \n              <button className=\"p-3 rounded-full bg-gray-700 hover:bg-gray-600 transition\">\n                <i className=\"fa-solid fa-cog text-white\"></i>\n              </button>\n            </div>\n          </div>\n\n          {/* Chat Sidebar */}\n          {showChat && (\n            <div className=\"w-1/4 bg-white border-l border-gray-300 flex flex-col\">\n              <div className=\"p-4 border-b border-gray-200\">\n                <h3 className=\"font-bold\">Session Chat</h3>\n              </div>\n              \n              <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n                {chatMessages.map((msg) => (\n                  <div key={msg.id} className=\"text-sm\">\n                    <div className=\"font-semibold text-gray-700\">{msg.sender}</div>\n                    <div className=\"text-gray-600\">{msg.message}</div>\n                    <div className=\"text-xs text-gray-400\">\n                      {msg.timestamp.toLocaleTimeString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"p-4 border-t border-gray-200\">\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"text\"\n                    value={chatInput}\n                    onChange={(e) => setChatInput(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}\n                    placeholder=\"Type a message...\"\n                    className=\"flex-1 border border-gray-300 rounded px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                  <button\n                    onClick={sendChatMessage}\n                    className=\"bg-blue-500 text-white px-3 py-2 rounded hover:bg-blue-600 transition\"\n                  >\n                    <i className=\"fa-solid fa-paper-plane\"></i>\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14261},"client/src/data/courseData.ts":{"content":"// Age-appropriate course data for the learning platform\n\nexport const courseData = {\n  \"6-11\": [\n    {\n      id: \"visual-coding-basics\",\n      title: \"🎨 Visual Coding Adventures\",\n      description: \"Learn coding through fun drag-and-drop blocks! Create animations, games, and stories while learning programming basics.\",\n      difficulty: \"beginner\",\n      category: \"programming\",\n      estimatedHours: 8,\n      imageUrl: \"/images/courses/visual-coding.svg\",\n      lessons: [\n        {\n          title: \"🎮 Meet Your Coding Buddy\",\n          type: \"interactive\",\n          description: \"Learn what coding is and meet our friendly coding character!\",\n          content: {\n            type: \"visual_story\",\n            elements: [\n              { type: \"animation\", src: \"robot-intro.gif\" },\n              { type: \"text\", content: \"Hi! I'm CodeBot, and I'll help you learn coding!\" },\n              { type: \"interactive_demo\", blocks: [\"move_forward\", \"turn_left\", \"say_hello\"] }\n            ]\n          },\n          estimatedMinutes: 20\n        },\n        {\n          title: \"🧩 Your First Block Program\",\n          type: \"interactive\",\n          description: \"Drag blocks to make CodeBot move and talk!\",\n          content: {\n            type: \"block_playground\",\n            starter_blocks: [\"move_forward\", \"say_hello\", \"turn_right\"],\n            goal: \"Make CodeBot say 'Hello World!' and move forward\"\n          },\n          estimatedMinutes: 30\n        },\n        {\n          title: \"🌈 Colors and Loops\",\n          type: \"interactive\", \n          description: \"Use repeat blocks to create colorful patterns!\",\n          content: {\n            type: \"creative_canvas\",\n            tools: [\"repeat\", \"change_color\", \"draw_shape\"],\n            project: \"rainbow_spiral\"\n          },\n          estimatedMinutes: 25\n        },\n        {\n          title: \"🎵 Make Music with Code\",\n          type: \"project\",\n          description: \"Create your own musical masterpiece using sound blocks!\",\n          content: {\n            type: \"music_maker\",\n            blocks: [\"play_note\", \"repeat\", \"wait\", \"change_tempo\"],\n            example_song: \"twinkle_star\"\n          },\n          estimatedMinutes: 35\n        }\n      ]\n    },\n    {\n      id: \"micro-bit-adventures\",\n      title: \"🤖 Micro:bit Magic\",\n      description: \"Program a virtual micro:bit! Make lights flash, buttons work, and create awesome displays.\",\n      difficulty: \"beginner\",\n      category: \"robotics\",\n      estimatedHours: 6,\n      imageUrl: \"/images/courses/microbit.svg\",\n      lessons: [\n        {\n          title: \"✨ Light Up the World\",\n          type: \"interactive\",\n          description: \"Learn to control LED lights and create patterns!\",\n          content: {\n            type: \"microbit_simulator\",\n            starter_code: \"basic.showIcon(IconNames.Heart)\",\n            challenges: [\"heart_blink\", \"smiley_face\", \"custom_pattern\"]\n          },\n          estimatedMinutes: 25\n        },\n        {\n          title: \"🎮 Button Games\",\n          type: \"interactive\",\n          description: \"Make games using A and B buttons!\",\n          content: {\n            type: \"button_games\",\n            games: [\"reaction_timer\", \"memory_game\", \"counter\"]\n          },\n          estimatedMinutes: 30\n        },\n        {\n          title: \"📱 Shake and Move\",\n          type: \"project\",\n          description: \"Use motion sensors to create interactive programs!\",\n          content: {\n            type: \"motion_projects\",\n            projects: [\"magic_8_ball\", \"step_counter\", \"dice_roller\"]\n          },\n          estimatedMinutes: 40\n        }\n      ]\n    },\n    {\n      id: \"game-maker-junior\",\n      title: \"🎮 Little Game Makers\",\n      description: \"Create your first video games! Design characters, add sounds, and make them move.\",\n      difficulty: \"beginner\",\n      category: \"game-development\",\n      estimatedHours: 10,\n      imageUrl: \"/images/courses/game-maker.svg\",\n      lessons: [\n        {\n          title: \"👾 Design Your Hero\",\n          type: \"interactive\",\n          description: \"Create and customize your game character!\",\n          content: {\n            type: \"character_designer\",\n            tools: [\"sprite_editor\", \"animation_maker\", \"color_picker\"]\n          },\n          estimatedMinutes: 30\n        },\n        {\n          title: \"🏃 Make It Move\",\n          type: \"interactive\",\n          description: \"Program your character to walk, jump, and dance!\",\n          content: {\n            type: \"movement_coding\",\n            blocks: [\"move_left\", \"move_right\", \"jump\", \"animate\"],\n            playground: \"simple_platformer\"\n          },\n          estimatedMinutes: 35\n        },\n        {\n          title: \"🎨 Build Your World\",\n          type: \"project\",\n          description: \"Design backgrounds and obstacles for your game!\",\n          content: {\n            type: \"world_builder\",\n            tools: [\"background_maker\", \"obstacle_placer\", \"collect_items\"]\n          },\n          estimatedMinutes: 45\n        }\n      ]\n    }\n  ],\n  \"12-17\": [\n    {\n      id: \"javascript-foundations\",\n      title: \"💻 JavaScript Mastery\",\n      description: \"Master the fundamentals of JavaScript programming with hands-on projects and real-world applications.\",\n      difficulty: \"beginner\",\n      category: \"programming\",\n      estimatedHours: 15,\n      imageUrl: \"/images/courses/javascript.svg\",\n      lessons: [\n        {\n          title: \"Variables and Data Types\",\n          type: \"interactive\",\n          description: \"Learn to store and manipulate different types of data in JavaScript.\",\n          content: {\n            type: \"code_tutorial\",\n            exercises: [\"variable_declaration\", \"string_manipulation\", \"number_operations\"],\n            interactive_editor: true\n          },\n          estimatedMinutes: 45\n        },\n        {\n          title: \"Functions and Control Flow\",\n          type: \"interactive\",\n          description: \"Master functions, conditionals, and loops to control program flow.\",\n          content: {\n            type: \"advanced_coding\",\n            topics: [\"function_creation\", \"if_statements\", \"for_loops\", \"while_loops\"],\n            challenges: [\"calculator\", \"grade_evaluator\", \"fibonacci\"]\n          },\n          estimatedMinutes: 60\n        },\n        {\n          title: \"DOM Manipulation\",\n          type: \"project\",\n          description: \"Learn to make interactive web pages by controlling HTML elements.\",\n          content: {\n            type: \"web_project\",\n            project_type: \"interactive_webpage\",\n            skills: [\"element_selection\", \"event_handling\", \"dynamic_content\"]\n          },\n          estimatedMinutes: 75\n        }\n      ]\n    },\n    {\n      id: \"web-development-pro\",\n      title: \"🌐 Full-Stack Web Development\",\n      description: \"Build complete web applications from frontend to backend using modern technologies.\",\n      difficulty: \"intermediate\",\n      category: \"web-development\",\n      estimatedHours: 20,\n      imageUrl: \"/images/courses/web-dev.svg\",\n      lessons: [\n        {\n          title: \"HTML5 & CSS3 Foundations\",\n          type: \"interactive\",\n          description: \"Master semantic HTML and advanced CSS techniques.\",\n          content: {\n            type: \"web_builder\",\n            projects: [\"responsive_portfolio\", \"css_animations\", \"flexbox_layout\"],\n            live_preview: true\n          },\n          estimatedMinutes: 90\n        },\n        {\n          title: \"React Components\",\n          type: \"interactive\",\n          description: \"Learn component-based development with React.\",\n          content: {\n            type: \"react_tutorial\",\n            concepts: [\"jsx\", \"components\", \"props\", \"state\", \"hooks\"],\n            project: \"todo_app\"\n          },\n          estimatedMinutes: 120\n        },\n        {\n          title: \"Backend with Node.js\",\n          type: \"project\",\n          description: \"Build REST APIs and connect to databases.\",\n          content: {\n            type: \"backend_project\",\n            technologies: [\"express\", \"mongodb\", \"authentication\"],\n            final_project: \"social_media_api\"\n          },\n          estimatedMinutes: 150\n        }\n      ]\n    },\n    {\n      id: \"robotics-programming\",\n      title: \"🤖 Advanced Robotics Programming\",\n      description: \"Program real robots and create autonomous systems using sensors and AI.\",\n      difficulty: \"intermediate\", \n      category: \"robotics\",\n      estimatedHours: 18,\n      imageUrl: \"/images/courses/robotics.svg\",\n      lessons: [\n        {\n          title: \"Sensor Integration\",\n          type: \"interactive\",\n          description: \"Learn to work with ultrasonic, camera, and motion sensors.\",\n          content: {\n            type: \"sensor_lab\",\n            sensors: [\"ultrasonic\", \"camera\", \"gyroscope\", \"accelerometer\"],\n            projects: [\"obstacle_avoidance\", \"line_following\"]\n          },\n          estimatedMinutes: 80\n        },\n        {\n          title: \"Machine Learning for Robots\",\n          type: \"interactive\",\n          description: \"Implement basic AI to make robots learn and adapt.\",\n          content: {\n            type: \"ai_programming\",\n            concepts: [\"pattern_recognition\", \"decision_trees\", \"neural_networks\"],\n            robot_project: \"smart_pet\"\n          },\n          estimatedMinutes: 100\n        },\n        {\n          title: \"Autonomous Robot Challenge\",\n          type: \"project\",\n          description: \"Build a robot that can navigate and complete tasks independently.\",\n          content: {\n            type: \"robot_challenge\",\n            requirements: [\"autonomous_navigation\", \"object_manipulation\", \"task_completion\"],\n            final_demo: true\n          },\n          estimatedMinutes: 180\n        }\n      ]\n    }\n  ]\n};\n\nexport const roboticsActivities = {\n  \"6-11\": [\n    {\n      id: \"maze-runner\",\n      title: \"🏃 Maze Runner\",\n      description: \"Help RoboFriend navigate through colorful mazes!\",\n      type: \"maze\",\n      difficulty: \"easy\",\n      instructions: [\n        { step: 1, text: \"Drag the 'Move Forward' block\", image: \"move-forward.svg\" },\n        { step: 2, text: \"Add 'Turn Left' or 'Turn Right' blocks\", image: \"turn-blocks.svg\" },\n        { step: 3, text: \"Connect blocks to reach the goal!\", image: \"goal-star.svg\" }\n      ],\n      mazeData: {\n        width: 5,\n        height: 5,\n        start: [0, 0],\n        goal: [4, 4],\n        walls: [[1,1], [2,1], [1,2], [3,2], [2,3]],\n        theme: \"forest\"\n      },\n      estimatedMinutes: 15,\n      points: 100\n    },\n    {\n      id: \"light-puzzle\",\n      title: \"💡 Light Up Puzzle\",\n      description: \"Turn on all the lights using the right sequence!\",\n      type: \"puzzle\",\n      difficulty: \"easy\",\n      instructions: [\n        { step: 1, text: \"Click lights to turn them on/off\", image: \"click-light.svg\" },\n        { step: 2, text: \"Some lights affect their neighbors\", image: \"neighbor-effect.svg\" },\n        { step: 3, text: \"Turn all lights on to win!\", image: \"all-lights-on.svg\" }\n      ],\n      puzzleData: {\n        gridSize: 3,\n        initialState: [false, true, false, true, false, true, false, true, false],\n        rules: \"toggle_neighbors\"\n      },\n      estimatedMinutes: 10,\n      points: 80\n    },\n    {\n      id: \"color-sequence\",\n      title: \"🌈 Color Pattern Master\",\n      description: \"Remember and repeat the colorful sequence!\",\n      type: \"challenge\",\n      difficulty: \"medium\",\n      instructions: [\n        { step: 1, text: \"Watch the color sequence carefully\", image: \"watch-colors.svg\" },\n        { step: 2, text: \"Click colors in the same order\", image: \"repeat-sequence.svg\" },\n        { step: 3, text: \"Each round adds one more color!\", image: \"growing-sequence.svg\" }\n      ],\n      gameData: {\n        colors: [\"red\", \"blue\", \"yellow\", \"green\"],\n        maxSequenceLength: 8,\n        theme: \"rainbow\"\n      },\n      estimatedMinutes: 12,\n      points: 120\n    },\n    {\n      id: \"robot-painter\",\n      title: \"🎨 Robot Artist\",\n      description: \"Program your robot to paint beautiful pictures!\",\n      type: \"project\",\n      difficulty: \"medium\",\n      instructions: [\n        { step: 1, text: \"Choose your colors from the palette\", image: \"color-palette.svg\" },\n        { step: 2, text: \"Use 'Move and Paint' blocks\", image: \"paint-blocks.svg\" },\n        { step: 3, text: \"Create your masterpiece!\", image: \"art-canvas.svg\" }\n      ],\n      projectData: {\n        canvasSize: [400, 300],\n        tools: [\"move_paint\", \"change_color\", \"lift_brush\", \"lower_brush\"],\n        templates: [\"flower\", \"house\", \"rainbow\", \"free_draw\"]\n      },\n      estimatedMinutes: 20,\n      points: 150\n    }\n  ],\n  \"12-17\": [\n    {\n      id: \"algorithm-challenge\",\n      title: \"🧮 Algorithm Optimization\",\n      description: \"Solve complex pathfinding and sorting challenges efficiently.\",\n      type: \"challenge\",\n      difficulty: \"hard\",\n      instructions: [\n        { step: 1, text: \"Analyze the problem constraints\", image: \"analysis.svg\" },\n        { step: 2, text: \"Implement your algorithm\", image: \"code-editor.svg\" },\n        { step: 3, text: \"Optimize for time and space complexity\", image: \"optimization.svg\" }\n      ],\n      challenges: [\n        { name: \"Dijkstra's Pathfinding\", difficulty: \"hard\", topic: \"graphs\" },\n        { name: \"Dynamic Programming\", difficulty: \"hard\", topic: \"optimization\" },\n        { name: \"Binary Search Tree\", difficulty: \"medium\", topic: \"data_structures\" }\n      ],\n      estimatedMinutes: 45,\n      points: 300\n    },\n    {\n      id: \"ai-robot-trainer\",\n      title: \"🧠 AI Robot Trainer\",\n      description: \"Train robots using machine learning algorithms.\",\n      type: \"project\",\n      difficulty: \"hard\",\n      instructions: [\n        { step: 1, text: \"Collect training data from sensors\", image: \"data-collection.svg\" },\n        { step: 2, text: \"Choose and configure ML model\", image: \"ml-model.svg\" },\n        { step: 3, text: \"Train and test your robot\", image: \"robot-training.svg\" }\n      ],\n      projectData: {\n        mlModels: [\"neural_network\", \"decision_tree\", \"svm\"],\n        datasets: [\"obstacle_detection\", \"object_classification\", \"behavior_prediction\"],\n        evaluationMetrics: [\"accuracy\", \"precision\", \"recall\"]\n      },\n      estimatedMinutes: 60,\n      points: 400\n    }\n  ]\n};\n\n// Teacher course creation templates\nexport const teacherCourseTemplates = [\n  {\n    id: \"programming-fundamentals\",\n    title: \"Programming Fundamentals Template\",\n    description: \"A comprehensive template for teaching basic programming concepts\",\n    ageGroup: \"both\",\n    sections: [\n      { name: \"Variables and Data Types\", estimatedHours: 2 },\n      { name: \"Control Flow\", estimatedHours: 3 },\n      { name: \"Functions\", estimatedHours: 2 },\n      { name: \"Arrays and Objects\", estimatedHours: 3 },\n      { name: \"Final Project\", estimatedHours: 4 }\n    ],\n    resources: [\n      { type: \"slides\", name: \"Introduction to Variables\" },\n      { type: \"video\", name: \"Control Flow Explained\" },\n      { type: \"exercise\", name: \"Function Practice\" },\n      { type: \"project\", name: \"Calculator App\" }\n    ]\n  },\n  {\n    id: \"robotics-basics\",\n    title: \"Robotics Basics Template\", \n    description: \"Everything needed to teach robotics to students\",\n    ageGroup: \"6-11\",\n    sections: [\n      { name: \"What is a Robot?\", estimatedHours: 1 },\n      { name: \"Sensors and Motors\", estimatedHours: 2 },\n      { name: \"Basic Programming\", estimatedHours: 3 },\n      { name: \"Building Projects\", estimatedHours: 4 }\n    ],\n    resources: [\n      { type: \"interactive\", name: \"Robot Simulator\" },\n      { type: \"video\", name: \"How Sensors Work\" },\n      { type: \"project\", name: \"Pet Robot\" }\n    ]\n  }\n];","size_bytes":15759},"client/src/components/SchoolAdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, UserPlus, GraduationCap, School, Settings, BarChart3 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { User, School as SchoolType } from \"@shared/schema\";\nimport type { AuthUser } from \"@/types/user\";\n\ninterface SchoolAdminDashboardProps {\n  user: AuthUser;\n}\n\nexport function SchoolAdminDashboard({ user }: SchoolAdminDashboardProps) {\n  const [newUserForm, setNewUserForm] = useState({\n    name: \"\",\n    email: \"\",\n    role: \"\",\n    grade: \"\",\n    ageGroup: \"\",\n  });\n  const [newSchoolForm, setNewSchoolForm] = useState({\n    name: \"\",\n    address: \"\",\n    phone: \"\",\n    email: \"\",\n    maxStudents: 100,\n  });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get school information - use mock data if no schoolId\n  const { data: school } = useQuery<SchoolType>({\n    queryKey: [\"/api/schools\", user.schoolId || \"mock\"],\n    queryFn: async () => {\n      if (!user.schoolId) {\n        // Return mock school data\n        return {\n          id: \"mock-school-id\",\n          name: user.schoolName || \"Demo School\",\n          address: \"123 Education Street\",\n          phone: \"(555) 123-4567\",\n          email: \"admin@school.edu\",\n          adminUserId: user.id,\n          packageId: null,\n          subscriptionStatus: \"active\",\n          subscriptionStart: new Date(),\n          subscriptionEnd: null,\n          maxStudents: 100,\n          currentStudents: 25,\n          createdAt: new Date(),\n        };\n      }\n      const response = await fetch(`/api/schools/${user.schoolId}`);\n      return await response.json();\n    },\n  });\n\n  // Get school users with mock data\n  const { data: schoolUsers, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/schools\", user.schoolId || \"mock\", \"users\"],\n    queryFn: async () => {\n      // Return mock users data\n      return [\n        {\n          id: \"teacher-1\",\n          email: \"teacher1@school.edu\",\n          firstName: \"Sarah\",\n          lastName: \"Johnson\", \n          profileImageUrl: null,\n          role: \"teacher\",\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        {\n          id: \"student-1\", \n          email: \"student1@school.edu\",\n          firstName: \"Alex\",\n          lastName: \"Smith\",\n          profileImageUrl: null,\n          role: \"student\",\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n        {\n          id: \"student-2\",\n          email: \"student2@school.edu\", \n          firstName: \"Emma\",\n          lastName: \"Davis\",\n          profileImageUrl: null,\n          role: \"student\",\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }\n      ];\n    },\n  });\n\n  // Create new user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: typeof newUserForm) => {\n      return await apiRequest(\"/api/schools/create-user\", \"POST\", {\n        ...userData,\n        schoolId: user.schoolId || \"mock-school-id\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User Created\",\n        description: \"New user has been successfully created.\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/schools\", user.schoolId || \"mock\", \"users\"],\n      });\n      setNewUserForm({\n        name: \"\",\n        email: \"\",\n        role: \"\",\n        grade: \"\",\n        ageGroup: \"\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create user. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create school mutation\n  const createSchoolMutation = useMutation({\n    mutationFn: async (schoolData: typeof newSchoolForm) => {\n      return await apiRequest(\"/api/schools\", \"POST\", {\n        ...schoolData,\n        adminUserId: user.id,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"School Created\",\n        description: \"Your school has been successfully set up.\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/schools\"],\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create school. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newUserForm.name || !newUserForm.email || !newUserForm.role) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createUserMutation.mutate(newUserForm);\n  };\n\n  const handleCreateSchool = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newSchoolForm.name || !newSchoolForm.email) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in school name and email.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createSchoolMutation.mutate(newSchoolForm);\n  };\n\n  const students = schoolUsers?.filter(u => u.role === 'student') || [];\n  const teachers = schoolUsers?.filter(u => u.role === 'teacher') || [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            School Administration Dashboard\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage your school's coding program and users\n          </p>\n        </div>\n\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Students</p>\n                  <p className=\"text-3xl font-bold text-blue-600\">{students.length}</p>\n                </div>\n                <GraduationCap className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Teachers</p>\n                  <p className=\"text-3xl font-bold text-green-600\">{teachers.length}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Capacity</p>\n                  <p className=\"text-3xl font-bold text-purple-600\">\n                    {school?.currentStudents || students.length}/{school?.maxStudents || 100}\n                  </p>\n                </div>\n                <School className=\"h-8 w-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Status</p>\n                  <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                    {school?.subscriptionStatus || \"Active\"}\n                  </Badge>\n                </div>\n                <BarChart3 className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"users\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"users\">Users</TabsTrigger>\n            <TabsTrigger value=\"create-user\">Create User</TabsTrigger>\n            <TabsTrigger value=\"school\">School Settings</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>School Users</CardTitle>\n                <CardDescription>\n                  Manage teachers and students in your school\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-3\">Teachers ({teachers.length})</h3>\n                    <div className=\"grid gap-3\">\n                      {teachers.map((teacher) => (\n                        <div key={teacher.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div>\n                            <p className=\"font-medium\">{teacher.firstName} {teacher.lastName}</p>\n                            <p className=\"text-sm text-gray-600\">{teacher.email}</p>\n                          </div>\n                          <Badge variant=\"secondary\">Teacher</Badge>\n                        </div>\n                      ))}\n                      {teachers.length === 0 && (\n                        <p className=\"text-gray-500 italic\">No teachers yet</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h3 className=\"text-lg font-semibold mb-3\">Students ({students.length})</h3>\n                    <div className=\"grid gap-3\">\n                      {students.map((student) => (\n                        <div key={student.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div>\n                            <p className=\"font-medium\">{student.firstName} {student.lastName}</p>\n                            <p className=\"text-sm text-gray-600\">{student.email}</p>\n                          </div>\n                          <Badge variant=\"outline\">Student</Badge>\n                        </div>\n                      ))}\n                      {students.length === 0 && (\n                        <p className=\"text-gray-500 italic\">No students yet</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Create User Tab */}\n          <TabsContent value=\"create-user\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Create New User</CardTitle>\n                <CardDescription>\n                  Add a new teacher or student to your school\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleCreateUser} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"user-name\">Full Name *</Label>\n                      <Input\n                        id=\"user-name\"\n                        value={newUserForm.name}\n                        onChange={(e) => setNewUserForm({...newUserForm, name: e.target.value})}\n                        placeholder=\"Enter full name\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"user-email\">Email Address *</Label>\n                      <Input\n                        id=\"user-email\"\n                        type=\"email\"\n                        value={newUserForm.email}\n                        onChange={(e) => setNewUserForm({...newUserForm, email: e.target.value})}\n                        placeholder=\"Enter email address\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"user-role\">Role *</Label>\n                      <Select\n                        value={newUserForm.role}\n                        onValueChange={(value) => setNewUserForm({...newUserForm, role: value})}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"teacher\">Teacher</SelectItem>\n                          <SelectItem value=\"student\">Student</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {newUserForm.role === 'student' && (\n                      <div>\n                        <Label htmlFor=\"user-age-group\">Age Group</Label>\n                        <Select\n                          value={newUserForm.ageGroup}\n                          onValueChange={(value) => setNewUserForm({...newUserForm, ageGroup: value})}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select age group\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"6-11\">Little Coders (6-11 years)</SelectItem>\n                            <SelectItem value=\"12-17\">Teen Coders (12-17 years)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={createUserMutation.isPending}\n                  >\n                    {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* School Settings Tab */}\n          <TabsContent value=\"school\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>School Information</CardTitle>\n                <CardDescription>\n                  Manage your school's basic information\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {school ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label>School Name</Label>\n                      <p className=\"text-lg font-semibold\">{school.name}</p>\n                    </div>\n                    <div>\n                      <Label>Email</Label>\n                      <p>{school.email}</p>\n                    </div>\n                    <div>\n                      <Label>Phone</Label>\n                      <p>{school.phone || \"Not provided\"}</p>\n                    </div>\n                    <div>\n                      <Label>Address</Label>\n                      <p>{school.address || \"Not provided\"}</p>\n                    </div>\n                    <div>\n                      <Label>Max Students</Label>\n                      <p>{school.maxStudents}</p>\n                    </div>\n                    <div>\n                      <Label>Subscription Status</Label>\n                      <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                        {school.subscriptionStatus}\n                      </Badge>\n                    </div>\n                  </div>\n                ) : (\n                  <form onSubmit={handleCreateSchool} className=\"space-y-4\">\n                    <p className=\"text-gray-600 mb-4\">Complete your school setup:</p>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"school-name\">School Name *</Label>\n                        <Input\n                          id=\"school-name\"\n                          value={newSchoolForm.name}\n                          onChange={(e) => setNewSchoolForm({...newSchoolForm, name: e.target.value})}\n                          placeholder=\"Enter school name\"\n                          required\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"school-email\">School Email *</Label>\n                        <Input\n                          id=\"school-email\"\n                          type=\"email\"\n                          value={newSchoolForm.email}\n                          onChange={(e) => setNewSchoolForm({...newSchoolForm, email: e.target.value})}\n                          placeholder=\"school@example.com\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"school-phone\">Phone Number</Label>\n                        <Input\n                          id=\"school-phone\"\n                          value={newSchoolForm.phone}\n                          onChange={(e) => setNewSchoolForm({...newSchoolForm, phone: e.target.value})}\n                          placeholder=\"(555) 123-4567\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"school-max-students\">Max Students</Label>\n                        <Input\n                          id=\"school-max-students\"\n                          type=\"number\"\n                          value={newSchoolForm.maxStudents}\n                          onChange={(e) => setNewSchoolForm({...newSchoolForm, maxStudents: parseInt(e.target.value)})}\n                          min=\"1\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"school-address\">Address</Label>\n                      <Input\n                        id=\"school-address\"\n                        value={newSchoolForm.address}\n                        onChange={(e) => setNewSchoolForm({...newSchoolForm, address: e.target.value})}\n                        placeholder=\"123 Education Street, City, State\"\n                      />\n                    </div>\n\n                    <Button \n                      type=\"submit\" \n                      className=\"w-full\"\n                      disabled={createSchoolMutation.isPending}\n                    >\n                      {createSchoolMutation.isPending ? \"Creating School...\" : \"Complete School Setup\"}\n                    </Button>\n                  </form>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>School Analytics</CardTitle>\n                <CardDescription>\n                  Track your school's coding program performance\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <h3 className=\"text-2xl font-bold text-blue-600\">{students.length}</h3>\n                    <p className=\"text-gray-600\">Active Students</p>\n                  </div>\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <h3 className=\"text-2xl font-bold text-green-600\">{teachers.length}</h3>\n                    <p className=\"text-gray-600\">Teaching Staff</p>\n                  </div>\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <h3 className=\"text-2xl font-bold text-purple-600\">\n                      {Math.round(((students.length) / (school?.maxStudents || 100)) * 100)}%\n                    </h3>\n                    <p className=\"text-gray-600\">Capacity Used</p>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                  <h4 className=\"font-semibold text-blue-900 mb-2\">Getting Started</h4>\n                  <ul className=\"text-blue-800 text-sm space-y-1\">\n                    <li>• Create teacher accounts for your coding instructors</li>\n                    <li>• Add student accounts for your coding program participants</li>\n                    <li>• Monitor student progress and achievements</li>\n                    <li>• Track program engagement and completion rates</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":21732},"client/src/lib/auth.ts":{"content":"import type { User } from '@shared/schema';\n\nexport interface AuthResponse {\n  user: User;\n  sessionToken: string;\n}\n\nconst API_BASE = '/api/auth';\n\n// Sign up user\nexport async function signUp(\n  email: string,\n  password: string,\n  name: string,\n  role: string,\n  ageGroup?: string,\n  childName?: string,\n  schoolName?: string,\n  packageId?: string\n): Promise<AuthResponse> {\n  const data = {\n    email,\n    password,\n    name,\n    role,\n    ageGroup,\n    childName,\n    schoolName,\n    packageId\n  };\n  const response = await fetch(`${API_BASE}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n    credentials: 'include', // Include cookies\n  });\n\n  if (!response.ok) {\n    let errorMessage = 'Sign up failed';\n    try {\n      const error = await response.json();\n      errorMessage = error.error || error.message || 'Sign up failed';\n    } catch (parseError) {\n      // If response is not JSON, use the response text\n      const errorText = await response.text();\n      errorMessage = errorText || `Server error (${response.status})`;\n    }\n    throw new Error(errorMessage);\n  }\n\n  return response.json();\n}\n\n// Sign in user\nexport async function signIn(email: string, password: string): Promise<AuthResponse> {\n  const response = await fetch(`${API_BASE}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n    credentials: 'include', // Include cookies\n  });\n\n  if (!response.ok) {\n    let errorMessage = 'Sign in failed';\n    try {\n      const error = await response.json();\n      errorMessage = error.error || error.message || 'Sign in failed';\n    } catch (parseError) {\n      // If response is not JSON, use the response text\n      const errorText = await response.text();\n      errorMessage = errorText || `Server error (${response.status})`;\n    }\n    throw new Error(errorMessage);\n  }\n\n  return response.json();\n}\n\n// Sign out user\nexport async function signOut(): Promise<void> {\n  const response = await fetch(`${API_BASE}/signout`, {\n    method: 'POST',\n    credentials: 'include', // Include cookies\n  });\n\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.error || 'Sign out failed');\n  }\n}\n\n// Get current user\nexport async function getCurrentUser(): Promise<User | null> {\n  try {\n    const response = await fetch(`${API_BASE}/me`, {\n      credentials: 'include', // Include cookies\n    });\n\n    if (!response.ok) {\n      return null;\n    }\n\n    const data = await response.json();\n    return data.user;\n  } catch (error) {\n    console.error('Get current user error:', error);\n    return null;\n  }\n}","size_bytes":2728},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\nimport { eq, and, gt, sql } from 'drizzle-orm';\nimport { db } from './db';\nimport { users, userSessions, type User, type InsertUser, type InsertUserSession } from '../shared/schema';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\nconst SESSION_DURATION = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport interface AuthenticatedRequest extends Request {\n  user?: User;\n  session?: any;\n}\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Generate session token\nexport function generateSessionToken(userId: string): string {\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: '7d' });\n}\n\n// Create user session\nexport async function createUserSession(\n  userId: string, \n  userAgent?: string, \n  ipAddress?: string\n): Promise<string> {\n  const sessionToken = generateSessionToken(userId);\n  const expiresAt = new Date(Date.now() + SESSION_DURATION);\n\n  await db.insert(userSessions).values({\n    userId,\n    sessionToken,\n    expiresAt,\n    userAgent,\n    ipAddress,\n  });\n\n  return sessionToken;\n}\n\n// Get user by session token\nexport async function getUserBySessionToken(sessionToken: string): Promise<User | null> {\n  try {\n    const decoded = jwt.verify(sessionToken, JWT_SECRET) as { userId: string };\n    \n    // Check if session exists and is valid\n    const session = await db\n      .select()\n      .from(userSessions)\n      .where(\n        and(\n          eq(userSessions.sessionToken, sessionToken),\n          sql`${userSessions.expiresAt} > NOW()`\n        )\n      )\n      .limit(1);\n\n    if (session.length === 0) {\n      return null;\n    }\n\n    // Get user\n    const user = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, decoded.userId))\n      .limit(1);\n\n    return user[0] || null;\n  } catch (error) {\n    return null;\n  }\n}\n\n// Revoke session\nexport async function revokeSession(sessionToken: string): Promise<void> {\n  await db.delete(userSessions).where(eq(userSessions.sessionToken, sessionToken));\n}\n\n// Clean expired sessions\nexport async function cleanExpiredSessions(): Promise<void> {\n  await db.delete(userSessions).where(sql`${userSessions.expiresAt} < NOW()`);\n}\n\n// Authentication middleware\nexport async function requireAuth(\n  req: AuthenticatedRequest, \n  res: Response, \n  next: NextFunction\n): Promise<void> {\n  try {\n    const sessionToken = req.cookies?.sessionToken || req.headers.authorization?.replace('Bearer ', '');\n    \n    if (!sessionToken) {\n      res.status(401).json({ error: 'Authentication required' });\n      return;\n    }\n\n    const user = await getUserBySessionToken(sessionToken);\n    \n    if (!user) {\n      res.status(401).json({ error: 'Invalid or expired session' });\n      return;\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n}\n\n// Create new user\nexport async function createUser(userData: InsertUser & { password: string }): Promise<User> {\n  const { password, ...userDetails } = userData;\n  const passwordHash = await hashPassword(password);\n\n  const newUser = await db\n    .insert(users)\n    .values({\n      ...userDetails,\n      passwordHash,\n    })\n    .returning();\n\n  return newUser[0];\n}\n\n// Sign in user\nexport async function signInUser(\n  email: string, \n  password: string,\n  userAgent?: string,\n  ipAddress?: string\n): Promise<{ user: User; sessionToken: string } | null> {\n  // Find user by email\n  const userResult = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  if (userResult.length === 0) {\n    return null;\n  }\n\n  const user = userResult[0];\n\n  // Verify password\n  if (!user.passwordHash || !(await verifyPassword(password, user.passwordHash))) {\n    return null;\n  }\n\n  // Update last login\n  await db\n    .update(users)\n    .set({ lastLoginAt: new Date() })\n    .where(eq(users.id, user.id));\n\n  // Create session\n  const sessionToken = await createUserSession(user.id, userAgent, ipAddress);\n\n  return { user, sessionToken };\n}\n\n// Sign out user\nexport async function signOutUser(sessionToken: string): Promise<void> {\n  await revokeSession(sessionToken);\n}","size_bytes":4541},"server/authRoutes.ts":{"content":"import { Router } from 'express';\nimport { z } from 'zod';\nimport { eq } from 'drizzle-orm';\nimport { db } from './db';\nimport { users } from '../shared/schema';\nimport { \n  createUser, \n  signInUser, \n  signOutUser, \n  requireAuth,\n  type AuthenticatedRequest \n} from './auth';\n\nconst router = Router();\n\n// Sign up schema\nconst signUpSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  name: z.string().min(1),\n  role: z.enum(['student', 'teacher', 'parent', 'school_admin']),\n  ageGroup: z.enum(['6-11', '12-17']).optional(),\n  childName: z.string().optional(),\n  schoolName: z.string().optional(),\n  packageId: z.string().optional(),\n});\n\n// Sign in schema\nconst signInSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\n// Sign up route\nrouter.post('/signup', async (req, res) => {\n  try {\n    const data = signUpSchema.parse(req.body);\n    \n    // Check if user already exists\n    const existingUser = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, data.email))\n      .limit(1);\n\n    if (existingUser.length > 0) {\n      return res.status(400).json({ error: 'User already exists' });\n    }\n\n    // Create user\n    const user = await createUser(data);\n    \n    // Sign in user immediately after signup\n    const signInResult = await signInUser(\n      data.email, \n      data.password,\n      req.get('User-Agent'),\n      req.ip\n    );\n\n    if (!signInResult) {\n      return res.status(500).json({ error: 'Failed to sign in after signup' });\n    }\n\n    // Set session cookie\n    res.cookie('sessionToken', signInResult.sessionToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    // Return user without password hash\n    const { passwordHash, ...userWithoutPassword } = signInResult.user;\n    res.json({ user: userWithoutPassword, sessionToken: signInResult.sessionToken });\n  } catch (error) {\n    console.error('Signup error:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: 'Invalid input', details: error.errors });\n    }\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Sign in route\nrouter.post('/signin', async (req, res) => {\n  try {\n    const { email, password } = signInSchema.parse(req.body);\n    \n    const result = await signInUser(\n      email, \n      password,\n      req.get('User-Agent'),\n      req.ip\n    );\n\n    if (!result) {\n      return res.status(401).json({ error: 'Invalid email or password' });\n    }\n\n    // Set session cookie\n    res.cookie('sessionToken', result.sessionToken, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    });\n\n    // Return user without password hash\n    const { passwordHash, ...userWithoutPassword } = result.user;\n    res.json({ user: userWithoutPassword, sessionToken: result.sessionToken });\n  } catch (error) {\n    console.error('Signin error:', error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: 'Invalid input', details: error.errors });\n    }\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Sign out route\nrouter.post('/signout', requireAuth, async (req: AuthenticatedRequest, res) => {\n  try {\n    const sessionToken = req.cookies?.sessionToken || req.headers.authorization?.replace('Bearer ', '');\n    \n    if (sessionToken) {\n      await signOutUser(sessionToken);\n    }\n\n    res.clearCookie('sessionToken');\n    res.json({ message: 'Signed out successfully' });\n  } catch (error) {\n    console.error('Signout error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Get current user route\nrouter.get('/me', requireAuth, async (req: AuthenticatedRequest, res) => {\n  try {\n    if (!req.user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n\n    // Return user without password hash\n    const { passwordHash, ...userWithoutPassword } = req.user;\n    res.json({ user: userWithoutPassword });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nexport default router;","size_bytes":4310},"vite.config.vercel.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n    sourcemap: false,\n    rollupOptions: {\n      external: [],\n      output: {\n        manualChunks: undefined,\n      },\n    },\n  },\n  define: {\n    'process.env.NODE_ENV': JSON.stringify('production'),\n  },\n});","size_bytes":803},"client/src/components/PackageSelector.tsx":{"content":"import { useState, useEffect } from 'react';\n\nexport interface Package {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  currency: string;\n  duration: string;\n  features: string;\n  maxStudents: number | null;\n  packageType: 'individual' | 'school';\n  isActive: boolean;\n}\n\ninterface PackageSelectorProps {\n  packageType: 'individual' | 'school';\n  selectedPackageId: string;\n  onPackageSelect: (packageId: string) => void;\n}\n\nexport function PackageSelector({ packageType, selectedPackageId, onPackageSelect }: PackageSelectorProps) {\n  const [packages, setPackages] = useState<Package[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchPackages = async () => {\n      try {\n        const response = await fetch('/api/packages');\n        if (response.ok) {\n          const allPackages = await response.json();\n          console.log('Raw fetched packages:', allPackages);\n          console.log('Looking for packageType:', packageType);\n          console.log('Available packageTypes:', allPackages.map((p: any) => p.packageType));\n          \n          const filteredPackages = allPackages.filter((pkg: Package) => {\n            console.log(`Package ${pkg.name}: type=${pkg.packageType}, active=${pkg.isActive}, matches=${pkg.packageType === packageType}`);\n            return pkg.packageType === packageType && pkg.isActive;\n          });\n          console.log('Final filtered packages for', packageType, ':', filteredPackages);\n          setPackages(filteredPackages);\n        } else {\n          console.error('Failed to fetch packages:', response.status, response.statusText);\n        }\n      } catch (error) {\n        console.error('Error fetching packages:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPackages();\n  }, [packageType]);\n\n  if (loading) {\n    return <div className=\"text-center py-4\">Loading packages...</div>;\n  }\n\n  if (packages.length === 0) {\n    return (\n      <div className=\"text-center py-4\">\n        <p>No packages available for {packageType} users</p>\n        <p className=\"text-sm text-gray-500 mt-2\">\n          Expected package type: {packageType}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-lg font-semibold mb-4\">\n        Choose Your {packageType === 'individual' ? 'Learning' : 'School'} Package\n      </h3>\n      \n      <div className=\"grid gap-4\">\n        {packages.map((pkg) => {\n          const features = pkg.features ? pkg.features.split(',').map(f => f.trim()) : [];\n          \n          return (\n            <div\n              key={pkg.id}\n              className={`border-2 rounded-lg p-4 cursor-pointer transition-all ${\n                selectedPackageId === pkg.id\n                  ? 'border-blue-500 bg-blue-50'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => onPackageSelect(pkg.id)}\n              data-testid={`package-option-${pkg.id}`}\n            >\n              <div className=\"flex justify-between items-start mb-2\">\n                <h4 className=\"font-semibold text-lg\">{pkg.name}</h4>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {pkg.currency === 'ZAR' ? 'R' : '$'}{pkg.price}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    per {pkg.duration}\n                  </div>\n                </div>\n              </div>\n              \n              {pkg.description && (\n                <p className=\"text-gray-600 mb-3\">{pkg.description}</p>\n              )}\n              \n              {pkg.maxStudents && (\n                <p className=\"text-sm text-gray-500 mb-2\">\n                  Up to {pkg.maxStudents} students\n                </p>\n              )}\n              \n              {features.length > 0 && (\n                <ul className=\"text-sm space-y-1\">\n                  {features.map((feature, index) => (\n                    <li key={index} className=\"flex items-center\">\n                      <span className=\"text-green-500 mr-2\">✓</span>\n                      {feature}\n                    </li>\n                  ))}\n                </ul>\n              )}\n              \n              <div className=\"mt-3\">\n                <input\n                  type=\"radio\"\n                  name=\"package\"\n                  value={pkg.id}\n                  checked={selectedPackageId === pkg.id}\n                  onChange={() => onPackageSelect(pkg.id)}\n                  className=\"mr-2\"\n                  data-testid={`radio-package-${pkg.id}`}\n                />\n                <label className=\"text-sm font-medium\">\n                  Select {pkg.name}\n                </label>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":4900}}}